%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: cluster_sampler.pdf
%%Creator: Adobe Acrobat 21.11.0
%%For: yuhzh
%%CreationDate: 1/18/2022, 8:17:07 PM
%%BoundingBox: -1 0 337 160
%%HiResBoundingBox: 0 0 336.8241 159.3142
%%CropBox: 0 0 336.8241 159.3142
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2016 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 830 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 7.1-c000 79.425dc87, 2021/10/27-16:20:32        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
   pdf:Producer="Microsoft® Visio® 2019"
   xmp:CreatorTool="Microsoft® Visio® 2019"
   xmp:CreateDate="2022-01-18T20:16:26+08:00"
   xmp:ModifyDate="2022-01-18T20:16:37+08:00"
   xmp:MetadataDate="2022-01-18T20:16:37+08:00"
   xmpMM:DocumentID="uuid:F56B6994-62A4-48C8-99FC-6365BD6645B1"
   xmpMM:InstanceID="uuid:9a45a7ca-3afa-46f4-9150-2efc017b6229"
   dc:format="application/pdf"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -159.314 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
-1.52588e-5 0 mo
-1.52588e-5 159.314 li
336.824 159.314 li
336.824 0 li
cp
clp
gsave
-.261993 159.466 mo
337.738 159.466 li
337.738 -.534177 li
-.261993 -.534177 li
-.261993 159.466 li
clp
.25 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
230.168 74.9458 mo
223.098 71.9758 li
false sop
/0 
[/DeviceGray] /CSA add_res
.647 gry
@
207.498 34.1758 mo
222.138 38.5858 li
@
222.138 38.5858 mo
232.278 36.0258 li
@
192.188 53.8658 mo
185.738 64.4458 li
@
216.058 68.0858 mo
223.098 71.9758 li
@
1 lw
[1 2 ] 0 dsh
50.72 41.0558 mo
58.398 34.9258 68.228 33.1958 77.508 33.3958 cv
88.138 33.6158 98.038 36.3558 106.318 41.6258 cv
.788 gry
@
46.864 44.7258 mo
49.529 37.3258 li
50.257 39.6958 52.058 41.5758 54.388 42.4158 cv
46.864 44.7258 li
cp
ef
110.648 44.7258 mo
102.868 43.4858 li
105.068 42.3258 106.588 40.2158 106.978 37.7658 cv
110.648 44.7258 li
cp
ef
0 gry
%ADOBeginSubsetFont: TimesNewRomanPS-ItalicMT Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2022 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /TimesNewRomanPS-ItalicMT def
/FontInfo 5 dict dup begin
/ItalicAngle 0 def
/FSType 8 def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 71 /G put
dup 115 /s put
dup 116 /t put
def
/FontBBox {-498 -307 1333 1023} def
end
systemdict begin
dup /Private
7 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
4 dict dup begin
/.notdef <1C60D8A8C9B6FF86FBD1638113E4B58C0B5F39100186722805B704
AA3988900AFCFF05DD> |-
/G <1C60D8A8C9B6079F6CEACBD764F72A15D440C7347EFC857F3F87E3569B65
42A31C957A3358D02F9CF1A323DF36EEE722F5BEBC6ABFB8D645E4C2E2DD1059
88BB4DE3BCA1F7FFD37951F1E230EF991A92A01CF352A53AC28A6FAF8344BA40
93C5E4AE7FB5A300B5C1CF06E4AF23E98B5468299203766CD3CFB65EFC8E982B
239C0CE95C673F796D745385A3465C7A9B7B61F4C96817F601E476F2C56FAA3D
A258425B96A091CCDA1569F951A80C942C33E1CD56F85B984CF9143F1688EA70
BDB1A29E86AA4FDA80876B7B8391BFC60312719C3F0E0CE4CC9BD56B5F2954F7
36BFBEF7C936D3C0CE7DE443194E> |-
/s <1C60D8A8C9B7361F025C7C4D0303D6CE893F51D869BCCC57F238FED481B9
6AB0D6B406042D64909B5B15A441860ACAD524570DEF75E4EA76578FD91FD71A
8077FF6E23AAE6F0974095E4C999A83B7E16B60FBB6A5AE152855056216BA421
C7B30818AA939C216FDAB05C60988B0DD7002BC261826362CD346E3A6F514F9F
1431C9C48DFC0F46570808CB49BD9B3149C4A3AA291BC1EEAA3D03623F2375C9
388ABFFC392B3B4B21840AE82436B62C4B88BD91D9BCB6B1AFA172883784EBAA
7B75DEB4573067FB9BF34769691A6A89267BC4E51631D49211C8FFEA> |-
/t <1C60D8A8C9B854D0F4BEDEF58C8CF76928EC03CF9E6A69066343B65CF2F2
9CD6E545B8A00752040D324808F3F5D7377FE94463A69378800F35B93737A90E
D33397EF28DE6855D7404A61AF81C1EEF0FFED3B556E8E9BEB0451CA1D28658C
106F5916BA3D50810F2ED0B604B6D36F194AAE36158BC40E0B3FFAD76350433E> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/DTRRBS+TimesNewRomanPS-ItalicMT /TimesNewRomanPS-ItalicMT findfont ct_VMDictPut
/DTRRBS+TimesNewRomanPS-ItalicMT*1 
[71{/.notdef}rp /G 43{/.notdef}rp /s /t 139{/.notdef}rp]
DTRRBS+TimesNewRomanPS-ItalicMT nf
DTRRBS+TimesNewRomanPS-ItalicMT*1 [14.025 0 0 -14.025 0 0 ]msf
12.713 77.5158 mo
(G)sh
DTRRBS+TimesNewRomanPS-ItalicMT*1 [9.025 0 0 -9.025 0 0 ]msf
22.813 79.5158 mo
(s)sh
DTRRBS+TimesNewRomanPS-ItalicMT*1 [14 0 0 -14 0 0 ]msf
132.918 74.6958 mo
(G)sh
DTRRBS+TimesNewRomanPS-ItalicMT*1 [9 0 0 -9 0 0 ]msf
143.038 76.6958 mo
(t)sh
46.452 54.7558 mo
54.268 43.6358 64.588 40.5358 74.298 40.8658 cv
85.318 41.2358 95.558 46.0158 104.018 55.2058 cv
.788 gry
@
43.656 59.2858 mo
44.354 51.4458 li
45.659 53.5558 47.879 54.9258 50.347 55.1458 cv
43.656 59.2858 li
cp
ef
107.438 59.2858 mo
100.218 56.1558 li
102.628 55.5758 104.628 53.9058 105.618 51.6358 cv
107.438 59.2858 li
cp
ef
60.768 54.0158 mo
68.578 42.8958 78.898 39.7958 88.618 40.1258 cv
99.628 40.4958 109.868 45.2758 118.328 54.4658 cv
@
57.968 58.5458 mo
58.668 50.7058 li
59.968 52.8158 62.188 54.1858 64.658 54.4058 cv
57.968 58.5458 li
cp
ef
121.748 58.5458 mo
114.528 55.4158 li
116.938 54.8358 118.938 53.1658 119.928 50.8958 cv
121.748 58.5458 li
cp
ef
52.808 68.5758 mo
60.618 57.4558 70.938 54.3558 80.648 54.6858 cv
91.668 55.0558 101.908 59.8358 110.368 69.0258 cv
@
50.007 73.1058 mo
50.705 65.2658 li
52.008 67.3758 54.228 68.7458 56.698 68.9658 cv
50.007 73.1058 li
cp
ef
113.788 73.1058 mo
106.568 69.9758 li
108.978 69.3958 110.978 67.7258 111.968 65.4558 cv
113.788 73.1058 li
cp
ef
35.1 64.6258 mo
42.915 53.5058 53.238 50.4058 62.948 50.7358 cv
73.968 51.1058 84.208 55.8858 92.658 65.0758 cv
@
32.304 69.1658 mo
33.002 61.3258 li
34.307 63.4258 36.527 64.7958 38.995 65.0158 cv
32.304 69.1658 li
cp
ef
96.088 69.1658 mo
88.868 66.0258 li
91.278 65.4458 93.278 63.7758 94.268 61.5058 cv
96.088 69.1658 li
cp
ef
35.554 45.1958 mo
43.312 36.5258 53.418 34.1058 62.948 34.3658 cv
73.788 34.6658 83.868 38.4458 92.248 45.7158 cv
@
32.304 49.4158 mo
33.808 41.6958 li
34.888 43.9258 36.955 45.5158 39.387 45.9858 cv
32.304 49.4158 li
cp
ef
96.088 49.4158 mo
88.578 47.0658 li
90.908 46.2358 92.718 44.3558 93.468 41.9958 cv
96.088 49.4158 li
cp
ef
.5 lw
2 lc
0 lj
[] 0 dsh
109.658 11.8258 mo
108.318 11.8258 107.228 10.7458 107.228 9.39581 cv
107.228 8.05582 108.318 6.96582 109.658 6.96582 cv
110.998 6.96582 112.088 8.05582 112.088 9.39581 cv
112.088 10.7458 110.998 11.8258 109.658 11.8258 cv
cp
/1 
[/DeviceRGB] /CSA add_res
.773 .353 .0667 rgb
@
174.128 11.8258 mo
172.788 11.8258 171.698 10.7459 171.698 9.39582 cv
171.698 8.05584 172.788 6.96584 174.128 6.96584 cv
175.468 6.96584 176.558 8.05584 176.558 9.39582 cv
176.558 10.7459 175.468 11.8258 174.128 11.8258 cv
/2 
[/DeviceRGB] /CSA add_res
.870588 .870588 .870588 rgb
f
174.128 11.8258 mo
172.788 11.8258 171.698 10.7458 171.698 9.39581 cv
171.698 8.05582 172.788 6.96582 174.128 6.96582 cv
175.468 6.96582 176.558 8.05582 176.558 9.39581 cv
176.558 10.7458 175.468 11.8258 174.128 11.8258 cv
cp
.357 .608 .835 rgb
@
117.958 11.8258 mo
116.618 11.8258 115.528 10.7459 115.528 9.39582 cv
115.528 8.05584 116.618 6.96584 117.958 6.96584 cv
119.298 6.96584 120.388 8.05584 120.388 9.39582 cv
120.388 10.7459 119.298 11.8258 117.958 11.8258 cv
.501961 .501961 .501961 rgb
f
117.958 11.8258 mo
116.618 11.8258 115.528 10.7458 115.528 9.39581 cv
115.528 8.05582 116.618 6.96582 117.958 6.96582 cv
119.298 6.96582 120.388 8.05582 120.388 9.39581 cv
120.388 10.7458 119.298 11.8258 117.958 11.8258 cv
cp
.773 .353 .0667 rgb
@
181.528 11.8258 mo
180.178 11.8258 179.098 10.7459 179.098 9.39582 cv
179.098 8.05584 180.178 6.96584 181.528 6.96584 cv
182.868 6.96584 183.958 8.05584 183.958 9.39582 cv
183.958 10.7459 182.868 11.8258 181.528 11.8258 cv
.478431 .478431 .478431 rgb
f
181.528 11.8258 mo
180.178 11.8258 179.098 10.7458 179.098 9.39581 cv
179.098 8.05582 180.178 6.96582 181.528 6.96582 cv
182.868 6.96582 183.958 8.05582 183.958 9.39581 cv
183.958 10.7458 182.868 11.8258 181.528 11.8258 cv
cp
.357 .608 .835 rgb
@
126.258 11.8258 mo
124.918 11.8258 123.828 10.7459 123.828 9.39582 cv
123.828 8.05584 124.918 6.96584 126.258 6.96584 cv
127.598 6.96584 128.688 8.05584 128.688 9.39582 cv
128.688 10.7459 127.598 11.8258 126.258 11.8258 cv
.368627 .368627 .368627 rgb
f
126.258 11.8258 mo
124.918 11.8258 123.828 10.7458 123.828 9.39581 cv
123.828 8.05582 124.918 6.96582 126.258 6.96582 cv
127.598 6.96582 128.688 8.05582 128.688 9.39581 cv
128.688 10.7458 127.598 11.8258 126.258 11.8258 cv
cp
.773 .353 .0667 rgb
@
188.928 11.8258 mo
187.578 11.8258 186.488 10.7459 186.488 9.39582 cv
186.488 8.05584 187.578 6.96584 188.928 6.96584 cv
190.268 6.96584 191.358 8.05584 191.358 9.39582 cv
191.358 10.7459 190.268 11.8258 188.928 11.8258 cv
.811765 .811765 .811765 rgb
f
188.928 11.8258 mo
187.578 11.8258 186.488 10.7458 186.488 9.39581 cv
186.488 8.05582 187.578 6.96582 188.928 6.96582 cv
190.268 6.96582 191.358 8.05582 191.358 9.39581 cv
191.358 10.7458 190.268 11.8258 188.928 11.8258 cv
cp
.357 .608 .835 rgb
@
134.558 11.8258 mo
133.218 11.8258 132.128 10.7459 132.128 9.39582 cv
132.128 8.05584 133.218 6.96584 134.558 6.96584 cv
135.908 6.96584 136.988 8.05584 136.988 9.39582 cv
136.988 10.7459 135.908 11.8258 134.558 11.8258 cv
.14902 .14902 .14902 rgb
f
134.558 11.8258 mo
133.218 11.8258 132.128 10.7458 132.128 9.39581 cv
132.128 8.05582 133.218 6.96582 134.558 6.96582 cv
135.908 6.96582 136.988 8.05582 136.988 9.39581 cv
136.988 10.7458 135.908 11.8258 134.558 11.8258 cv
cp
.773 .353 .0667 rgb
@
196.318 11.8258 mo
194.978 11.8258 193.888 10.7459 193.888 9.39582 cv
193.888 8.05584 194.978 6.96584 196.318 6.96584 cv
197.668 6.96584 198.748 8.05584 198.748 9.39582 cv
198.748 10.7459 197.668 11.8258 196.318 11.8258 cv
.501961 .501961 .501961 rgb
f
196.318 11.8258 mo
194.978 11.8258 193.888 10.7458 193.888 9.39581 cv
193.888 8.05582 194.978 6.96582 196.318 6.96582 cv
197.668 6.96582 198.748 8.05582 198.748 9.39581 cv
198.748 10.7458 197.668 11.8258 196.318 11.8258 cv
cp
.357 .608 .835 rgb
@
142.858 11.8258 mo
141.518 11.8258 140.428 10.7459 140.428 9.39582 cv
140.428 8.05584 141.518 6.96584 142.858 6.96584 cv
144.208 6.96584 145.288 8.05584 145.288 9.39582 cv
145.288 10.7459 144.208 11.8258 142.858 11.8258 cv
.368627 .368627 .368627 rgb
f
142.858 11.8258 mo
141.518 11.8258 140.428 10.7458 140.428 9.39581 cv
140.428 8.05582 141.518 6.96582 142.858 6.96582 cv
144.208 6.96582 145.288 8.05582 145.288 9.39581 cv
145.288 10.7458 144.208 11.8258 142.858 11.8258 cv
cp
.773 .353 .0667 rgb
@
203.718 11.8258 mo
202.378 11.8258 201.288 10.7458 201.288 9.39581 cv
201.288 8.05582 202.378 6.96582 203.718 6.96582 cv
205.058 6.96582 206.148 8.05582 206.148 9.39581 cv
206.148 10.7458 205.058 11.8258 203.718 11.8258 cv
cp
.357 .608 .835 rgb
@
151.168 11.8258 mo
149.818 11.8258 148.728 10.7459 148.728 9.39582 cv
148.728 8.05584 149.818 6.96584 151.168 6.96584 cv
152.508 6.96584 153.598 8.05584 153.598 9.39582 cv
153.598 10.7459 152.508 11.8258 151.168 11.8258 cv
.901961 .901961 .901961 rgb
f
151.168 11.8258 mo
149.818 11.8258 148.728 10.7458 148.728 9.39581 cv
148.728 8.05582 149.818 6.96582 151.168 6.96582 cv
152.508 6.96582 153.598 8.05582 153.598 9.39581 cv
153.598 10.7458 152.508 11.8258 151.168 11.8258 cv
cp
.773 .353 .0667 rgb
@
211.118 11.8258 mo
209.778 11.8258 208.688 10.7459 208.688 9.39582 cv
208.688 8.05584 209.778 6.96584 211.118 6.96584 cv
212.458 6.96584 213.548 8.05584 213.548 9.39582 cv
213.548 10.7459 212.458 11.8258 211.118 11.8258 cv
.34902 .34902 .34902 rgb
f
211.118 11.8258 mo
209.778 11.8258 208.688 10.7458 208.688 9.39581 cv
208.688 8.05582 209.778 6.96582 211.118 6.96582 cv
212.458 6.96582 213.548 8.05582 213.548 9.39581 cv
213.548 10.7458 212.458 11.8258 211.118 11.8258 cv
cp
.357 .608 .835 rgb
@
159.468 11.8258 mo
158.118 11.8258 157.038 10.7459 157.038 9.39582 cv
157.038 8.05584 158.118 6.96584 159.468 6.96584 cv
160.808 6.96584 161.898 8.05584 161.898 9.39582 cv
161.898 10.7459 160.808 11.8258 159.468 11.8258 cv
.780392 .780392 .780392 rgb
f
159.468 11.8258 mo
158.118 11.8258 157.038 10.7458 157.038 9.39581 cv
157.038 8.05582 158.118 6.96582 159.468 6.96582 cv
160.808 6.96582 161.898 8.05582 161.898 9.39581 cv
161.898 10.7458 160.808 11.8258 159.468 11.8258 cv
cp
.773 .353 .0667 rgb
@
218.518 11.8258 mo
217.178 11.8258 216.088 10.7459 216.088 9.39582 cv
216.088 8.05584 217.178 6.96584 218.518 6.96584 cv
219.858 6.96584 220.948 8.05584 220.948 9.39582 cv
220.948 10.7459 219.858 11.8258 218.518 11.8258 cv
.529412 .529412 .529412 rgb
f
218.518 11.8258 mo
217.178 11.8258 216.088 10.7458 216.088 9.39581 cv
216.088 8.05582 217.178 6.96582 218.518 6.96582 cv
219.858 6.96582 220.948 8.05582 220.948 9.39581 cv
220.948 10.7458 219.858 11.8258 218.518 11.8258 cv
cp
.357 .608 .835 rgb
@
.25 lw
[2 1 ] 0 dsh
167.978 5.98581 mo
167.978 12.8058 li
167.978 13.2758 168.368 13.6658 168.838 13.6658 cv
223.038 13.6658 li
223.508 13.6658 223.888 13.2758 223.888 12.8058 cv
223.888 5.98581 li
223.888 5.51581 223.508 5.13583 223.038 5.13583 cv
168.838 5.13583 li
168.368 5.13583 167.978 5.51581 167.978 5.98581 cv
cp
0 gry
@
104.788 5.98581 mo
104.788 12.8058 li
104.788 13.2758 105.168 13.6658 105.638 13.6658 cv
162.278 13.6658 li
162.748 13.6658 163.128 13.2758 163.128 12.8058 cv
163.128 5.98581 li
163.128 5.51581 162.748 5.13583 162.278 5.13583 cv
105.638 5.13583 li
105.168 5.13583 104.788 5.51581 104.788 5.98581 cv
cp
@
24.538 151.416 mo
138.728 151.416 li
146.608 151.416 152.998 145.026 152.998 137.146 cv
152.998 43.7958 li
152.998 35.9158 146.608 29.5258 138.728 29.5258 cv
24.538 29.5258 li
16.655 29.5258 10.265 35.9158 10.265 43.7958 cv
10.265 137.146 li
10.265 145.026 16.655 151.416 24.538 151.416 cv
cp
@
181.838 151.416 mo
241.928 151.416 li
246.078 151.416 249.448 148.056 249.448 143.906 cv
249.448 37.0358 li
249.448 32.8858 246.078 29.5258 241.928 29.5258 cv
181.838 29.5258 li
177.688 29.5258 174.328 32.8858 174.328 37.0358 cv
174.328 143.906 li
174.328 148.056 177.688 151.416 181.838 151.416 cv
cp
@
.275 .447 .769 rgb
%ADOBeginSubsetFont: TimesNewRomanPSMT Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2022 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /TimesNewRomanPSMT def
/FontInfo 5 dict dup begin
/ItalicAngle 0 def
/FSType 8 def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 91 /bracketleft put
dup 93 /bracketright put
dup 124 /bar put
def
/FontBBox {-568 -307 2046 1040} def
end
systemdict begin
dup /Private
7 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
4 dict dup begin
/.notdef <1C60D8A8C9B6FF86FBD66B095379F45880CA28D0F0C4629F99B72E
FEDBB222483BD74F8B> |-
/bracketleft <1C60D8A8C9B81F2C3A069E97D4C1B29DA23BF51FA8AE87F396
9878E69D10DC348BAF69> |-
/bracketright <1C60D8A8C9B81F2C7D3B98BC3C6790041552B3C4749878E48
F0B17EDC12AFE367344> |-
/bar <1C60D8A8C9B8A2CEA8CC9C7F849F9FC27BEBD29CF4A2> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/DTRRBT+TimesNewRomanPSMT /TimesNewRomanPSMT findfont ct_VMDictPut
/DTRRBT+TimesNewRomanPSMT*1 
[91{/.notdef}rp /bracketleft /.notdef /bracketright 30{/.notdef}rp /bar 131{/.notdef}rp]
DTRRBT+TimesNewRomanPSMT nf
DTRRBT+TimesNewRomanPSMT*1 [12.025 0 0 -12.025 0 0 ]msf
29.388 112.666 mo
([)sh
62.138 112.666 mo
(])sh
45.263 112.666 mo
(||)
[2.49996 0 ]xsh
42.195 119.976 mo
42.445 119.976 li
42.4448 122.124 40.702 123.866 38.552 123.866 cv
36.402 123.866 34.6591 122.124 34.6589 119.976 cv
34.6588 118.898 35.0949 117.921 35.7991 117.217 cv
36.5028 116.512 37.4778 116.076 38.552 116.076 cv
39.6262 116.076 40.6011 116.512 41.3048 117.217 cv
42.009 117.921 42.4451 118.898 42.445 119.976 cv
42.195 119.976 li
41.945 119.976 li
41.9449 118.093 40.4258 116.576 38.552 116.576 cv
36.6781 116.576 35.159 118.093 35.159 119.976 cv
35.1624 121.848 36.678 123.362 38.552 123.366 cv
40.426 123.362 41.9416 121.848 41.945 119.976 cv
42.195 119.976 li
.357 .608 .835 rgb
f
.5 lw
[] 0 dsh
42.195 108.886 mo
42.195 110.896 40.564 112.526 38.552 112.526 cv
36.54 112.526 34.909 110.896 34.909 108.886 cv
34.909 106.876 36.54 105.246 38.552 105.246 cv
40.564 105.246 42.195 106.876 42.195 108.886 cv
cp
@
42.195 97.7959 mo
42.445 97.7959 li
42.4448 99.9442 40.702 101.686 38.552 101.686 cv
36.402 101.686 34.6591 99.9442 34.6589 97.7959 cv
34.6591 95.6475 36.402 93.906 38.552 93.9059 cv
40.702 93.906 42.4448 95.6475 42.445 97.7959 cv
42.195 97.7959 li
41.945 97.7959 li
41.9416 95.9242 40.426 94.4092 38.552 94.4058 cv
36.678 94.4092 35.1624 95.9242 35.159 97.7959 cv
35.1624 99.6675 36.678 101.182 38.552 101.186 cv
40.426 101.182 41.9416 99.6675 41.945 97.7959 cv
42.195 97.7959 li
f
42.195 119.976 mo
42.445 119.976 li
42.4448 122.124 40.702 123.866 38.552 123.866 cv
36.402 123.866 34.6591 122.124 34.6589 119.976 cv
34.6588 118.898 35.0949 117.921 35.7991 117.217 cv
36.5028 116.512 37.4778 116.076 38.552 116.076 cv
39.6262 116.076 40.6011 116.512 41.3048 117.217 cv
42.009 117.921 42.4451 118.898 42.445 119.976 cv
42.195 119.976 li
41.945 119.976 li
41.9449 118.093 40.4258 116.576 38.552 116.576 cv
36.6781 116.576 35.159 118.093 35.159 119.976 cv
35.1624 121.848 36.678 123.362 38.552 123.366 cv
40.426 123.362 41.9416 121.848 41.945 119.976 cv
42.195 119.976 li
f
42.195 108.886 mo
42.195 110.896 40.564 112.526 38.552 112.526 cv
36.54 112.526 34.909 110.896 34.909 108.886 cv
34.909 106.876 36.54 105.246 38.552 105.246 cv
40.564 105.246 42.195 106.876 42.195 108.886 cv
cp
@
42.195 97.7959 mo
42.445 97.7959 li
42.4448 99.9442 40.702 101.686 38.552 101.686 cv
36.402 101.686 34.6591 99.9442 34.6589 97.7959 cv
34.6591 95.6475 36.402 93.906 38.552 93.9059 cv
40.702 93.906 42.4448 95.6475 42.445 97.7959 cv
42.195 97.7959 li
41.945 97.7959 li
41.9416 95.9242 40.426 94.4092 38.552 94.4058 cv
36.678 94.4092 35.1624 95.9242 35.159 97.7959 cv
35.1624 99.6675 36.678 101.182 38.552 101.186 cv
40.426 101.182 41.9416 99.6675 41.945 97.7959 cv
42.195 97.7959 li
f
60.618 119.976 mo
60.868 119.976 li
60.8678 122.124 59.1262 123.866 56.978 123.866 cv
54.8298 123.866 53.0881 122.124 53.088 119.976 cv
53.0919 117.818 54.8296 116.076 56.978 116.076 cv
59.1263 116.076 60.8641 117.818 60.868 119.976 cv
60.618 119.976 li
60.368 119.976 li
60.3679 118.093 58.8496 116.579 56.978 116.576 cv
55.1063 116.579 53.588 118.093 53.588 119.976 cv
53.5914 121.848 55.1062 123.362 56.978 123.366 cv
58.8497 123.362 60.3645 121.848 60.368 119.976 cv
60.618 119.976 li
.773 .353 .0667 rgb
f
60.618 108.886 mo
60.868 108.886 li
60.8678 111.034 59.1262 112.776 56.978 112.776 cv
54.8298 112.776 53.0881 111.034 53.088 108.886 cv
53.0881 106.738 54.8298 104.996 56.978 104.996 cv
59.1262 104.996 60.8678 106.738 60.868 108.886 cv
60.618 108.886 li
60.368 108.886 li
60.3645 107.014 58.8497 105.499 56.978 105.496 cv
55.1062 105.499 53.5914 107.014 53.588 108.886 cv
53.5914 110.758 55.1062 112.272 56.978 112.276 cv
58.8497 112.272 60.3645 110.758 60.368 108.886 cv
60.618 108.886 li
f
60.618 97.7959 mo
60.868 97.7959 li
60.8678 99.9441 59.1262 101.686 56.978 101.686 cv
54.8298 101.686 53.0881 99.9441 53.088 97.7959 cv
53.0881 95.6477 54.8298 93.906 56.978 93.9059 cv
59.1262 93.906 60.8678 95.6477 60.868 97.7959 cv
60.618 97.7959 li
60.368 97.7959 li
60.3645 95.924 58.8497 94.4092 56.978 94.4058 cv
55.1062 94.4092 53.5914 95.924 53.588 97.7959 cv
53.5914 99.6676 55.1062 101.182 56.978 101.186 cv
58.8497 101.182 60.3645 99.6676 60.368 97.7959 cv
60.618 97.7959 li
f
60.618 119.976 mo
60.868 119.976 li
60.8678 122.124 59.1262 123.866 56.978 123.866 cv
54.8298 123.866 53.0881 122.124 53.088 119.976 cv
53.0919 117.818 54.8296 116.076 56.978 116.076 cv
59.1263 116.076 60.8641 117.818 60.868 119.976 cv
60.618 119.976 li
60.368 119.976 li
60.3679 118.093 58.8496 116.579 56.978 116.576 cv
55.1063 116.579 53.588 118.093 53.588 119.976 cv
53.5914 121.848 55.1062 123.362 56.978 123.366 cv
58.8497 123.362 60.3645 121.848 60.368 119.976 cv
60.618 119.976 li
f
60.618 108.886 mo
60.868 108.886 li
60.8678 111.034 59.1262 112.776 56.978 112.776 cv
54.8298 112.776 53.0881 111.034 53.088 108.886 cv
53.0881 106.738 54.8298 104.996 56.978 104.996 cv
59.1262 104.996 60.8678 106.738 60.868 108.886 cv
60.618 108.886 li
60.368 108.886 li
60.3645 107.014 58.8497 105.499 56.978 105.496 cv
55.1062 105.499 53.5914 107.014 53.588 108.886 cv
53.5914 110.758 55.1062 112.272 56.978 112.276 cv
58.8497 112.272 60.3645 110.758 60.368 108.886 cv
60.618 108.886 li
f
60.618 97.7959 mo
60.868 97.7959 li
60.8678 99.9441 59.1262 101.686 56.978 101.686 cv
54.8298 101.686 53.0881 99.9441 53.088 97.7959 cv
53.0881 95.6477 54.8298 93.906 56.978 93.9059 cv
59.1262 93.906 60.8678 95.6477 60.868 97.7959 cv
60.618 97.7959 li
60.368 97.7959 li
60.3645 95.924 58.8497 94.4092 56.978 94.4058 cv
55.1062 94.4092 53.5914 95.924 53.588 97.7959 cv
53.5914 99.6676 55.1062 101.182 56.978 101.186 cv
58.8497 101.182 60.3645 99.6676 60.368 97.7959 cv
60.618 97.7959 li
f
.275 .447 .769 rgb
DTRRBT+TimesNewRomanPSMT*1 [12.025 0 0 -12.025 0 0 ]msf
29.388 112.666 mo
([)sh
62.138 112.666 mo
(])sh
45.263 112.666 mo
(||)
[2.49996 0 ]xsh
38.552 123.366 mo
36.678 123.362 35.1624 121.848 35.159 119.976 cv
35.159 118.093 36.6781 116.576 38.552 116.576 cv
40.4258 116.576 41.9449 118.093 41.945 119.976 cv
41.9416 121.848 40.426 123.362 38.552 123.366 cv
.12549 .12549 .12549 rgb
f
38.552 123.616 mo
36.5399 123.616 34.909 121.986 34.909 119.976 cv
34.909 117.956 36.5399 116.326 38.552 116.326 cv
40.564 116.326 42.195 117.956 42.195 119.976 cv
41.945 119.976 li
41.945 119.976 li
41.9449 118.093 40.4258 116.576 38.552 116.576 cv
36.6781 116.576 35.159 118.093 35.159 119.976 cv
35.159 119.976 li
35.1624 121.848 36.678 123.362 38.552 123.366 cv
40.426 123.362 41.9416 121.848 41.945 119.976 cv
42.195 119.976 li
42.195 119.976 li
42.195 121.986 40.564 123.616 38.552 123.616 cv
.180392 .305882 .419608 rgb
f
42.195 119.976 mo
42.195 121.986 40.564 123.616 38.552 123.616 cv
36.54 123.616 34.909 121.986 34.909 119.976 cv
34.909 117.956 36.54 116.326 38.552 116.326 cv
40.564 116.326 42.195 117.956 42.195 119.976 cv
cp
.357 .608 .835 rgb
@
42.195 108.886 mo
42.195 110.896 40.564 112.526 38.552 112.526 cv
36.54 112.526 34.909 110.896 34.909 108.886 cv
34.909 106.876 36.54 105.246 38.552 105.246 cv
40.564 105.246 42.195 106.876 42.195 108.886 cv
cp
@
38.552 101.186 mo
36.678 101.182 35.1624 99.6675 35.159 97.7959 cv
35.1624 95.9242 36.678 94.4092 38.552 94.4058 cv
40.426 94.4092 41.9416 95.9242 41.945 97.7959 cv
41.9416 99.6675 40.426 101.182 38.552 101.186 cv
.0431373 .0431373 .0431373 rgb
f
38.552 101.436 mo
36.5399 101.436 34.909 99.8058 34.909 97.7959 cv
34.909 95.7858 36.5399 94.1559 38.552 94.1559 cv
40.564 94.1559 42.195 95.7858 42.195 97.7959 cv
41.945 97.7959 li
41.945 97.7959 li
41.9416 95.9242 40.426 94.4092 38.552 94.4058 cv
36.678 94.4092 35.1624 95.9242 35.159 97.7959 cv
35.159 97.7959 li
35.1624 99.6675 36.678 101.182 38.552 101.186 cv
40.426 101.182 41.9416 99.6675 41.945 97.7959 cv
42.195 97.7959 li
42.195 97.7959 li
42.195 99.8058 40.564 101.436 38.552 101.436 cv
.12549 .211765 .290196 rgb
f
42.195 97.7958 mo
42.195 99.8058 40.564 101.436 38.552 101.436 cv
36.54 101.436 34.909 99.8058 34.909 97.7958 cv
34.909 95.7858 36.54 94.1558 38.552 94.1558 cv
40.564 94.1558 42.195 95.7858 42.195 97.7958 cv
cp
.357 .608 .835 rgb
@
56.978 123.366 mo
55.1062 123.362 53.5914 121.848 53.588 119.976 cv
53.588 118.093 55.1063 116.579 56.978 116.576 cv
58.8496 116.579 60.3679 118.093 60.368 119.976 cv
60.3645 121.848 58.8497 123.362 56.978 123.366 cv
.0509804 .0509804 .0509804 rgb
f
56.978 123.616 mo
54.968 123.616 53.338 121.986 53.338 119.976 cv
53.338 117.956 54.968 116.326 56.978 116.326 cv
58.9879 116.326 60.618 117.956 60.618 119.976 cv
60.368 119.976 li
60.368 119.976 li
60.3679 118.093 58.8496 116.579 56.978 116.576 cv
55.1063 116.579 53.588 118.093 53.588 119.976 cv
53.588 119.976 li
53.5914 121.848 55.1062 123.362 56.978 123.366 cv
58.8497 123.362 60.3645 121.848 60.368 119.976 cv
60.618 119.976 li
60.618 119.976 li
60.618 121.986 58.9879 123.616 56.978 123.616 cv
.286274 .129412 .0235294 rgb
f
60.618 119.976 mo
60.618 121.986 58.988 123.616 56.978 123.616 cv
54.968 123.616 53.338 121.986 53.338 119.976 cv
53.338 117.956 54.968 116.326 56.978 116.326 cv
58.988 116.326 60.618 117.956 60.618 119.976 cv
cp
.773 .353 .0667 rgb
@
56.978 112.276 mo
55.1062 112.272 53.5914 110.758 53.588 108.886 cv
53.5914 107.014 55.1062 105.499 56.978 105.496 cv
58.8497 105.499 60.3645 107.014 60.368 108.886 cv
60.3645 110.758 58.8497 112.272 56.978 112.276 cv
.733333 .733333 .733333 rgb
f
56.978 112.526 mo
54.968 112.526 53.338 110.896 53.338 108.886 cv
53.338 106.876 54.968 105.246 56.978 105.246 cv
58.9879 105.246 60.618 106.876 60.618 108.886 cv
60.368 108.886 li
60.368 108.886 li
60.3645 107.014 58.8497 105.499 56.978 105.496 cv
55.1062 105.499 53.5914 107.014 53.588 108.886 cv
53.588 108.886 li
53.5914 110.758 55.1062 112.272 56.978 112.276 cv
58.8497 112.272 60.3645 110.758 60.368 108.886 cv
60.618 108.886 li
60.618 108.886 li
60.618 110.896 58.9879 112.526 56.978 112.526 cv
.698039 .317647 .0588235 rgb
f
60.618 108.886 mo
60.618 110.896 58.988 112.526 56.978 112.526 cv
54.968 112.526 53.338 110.896 53.338 108.886 cv
53.338 106.876 54.968 105.246 56.978 105.246 cv
58.988 105.246 60.618 106.876 60.618 108.886 cv
cp
.773 .353 .0667 rgb
@
56.978 101.186 mo
55.1062 101.182 53.5914 99.6676 53.588 97.7959 cv
53.5914 95.924 55.1062 94.4092 56.978 94.4058 cv
58.8497 94.4092 60.3645 95.924 60.368 97.7959 cv
60.3645 99.6676 58.8497 101.182 56.978 101.186 cv
.47451 .47451 .47451 rgb
f
56.978 101.436 mo
54.968 101.436 53.338 99.8058 53.338 97.7959 cv
53.338 95.7858 54.968 94.1559 56.978 94.1559 cv
58.9879 94.1559 60.618 95.7858 60.618 97.7959 cv
60.368 97.7959 li
60.368 97.7959 li
60.3645 95.924 58.8497 94.4092 56.978 94.4058 cv
55.1062 94.4092 53.5914 95.924 53.588 97.7959 cv
53.588 97.7959 li
53.5914 99.6676 55.1062 101.182 56.978 101.186 cv
58.8497 101.182 60.3645 99.6676 60.368 97.7959 cv
60.618 97.7959 li
60.618 97.7959 li
60.618 99.8058 58.9879 101.436 56.978 101.436 cv
.603922 .27451 .0509804 rgb
f
60.618 97.7958 mo
60.618 99.8058 58.988 101.436 56.978 101.436 cv
54.968 101.436 53.338 99.8058 53.338 97.7958 cv
53.338 95.7858 54.968 94.1558 56.978 94.1558 cv
58.988 94.1558 60.618 95.7858 60.618 97.7958 cv
cp
.773 .353 .0667 rgb
@
93.738 95.6858 mo
91.768 92.1658 li
89.798 95.6858 li
93.738 95.6858 li
cp
.275 .447 .769 rgb
ef
92.018 94.5158 mo
92.018 139.796 li
92.018 139.934 91.9061 140.046 91.768 140.046 cv
91.6299 140.046 91.518 139.934 91.518 139.796 cv
91.518 94.5158 li
91.518 94.3777 91.6299 94.2658 91.768 94.2658 cv
91.9061 94.2658 92.018 94.3777 92.018 94.5158 cv
f
93.738 95.6858 mo
91.768 92.1658 li
89.798 95.6858 li
93.738 95.6858 li
cp
ef
92.018 94.5158 mo
92.018 139.796 li
92.018 139.934 91.9061 140.046 91.768 140.046 cv
91.6299 140.046 91.518 139.934 91.518 139.796 cv
91.518 94.5158 li
91.518 94.3777 91.6299 94.2658 91.768 94.2658 cv
91.9061 94.2658 92.018 94.3777 92.018 94.5158 cv
f
137.988 138.396 mo
141.928 136.636 li
137.988 134.886 li
137.988 138.396 li
ef
139.298 136.886 mo
88.498 136.886 li
88.3599 136.886 88.248 136.774 88.248 136.636 cv
88.248 136.498 88.3599 136.386 88.498 136.386 cv
139.298 136.386 li
139.436 136.386 139.548 136.498 139.548 136.636 cv
139.548 136.774 139.436 136.886 139.298 136.886 cv
f
137.988 138.396 mo
141.928 136.636 li
137.988 134.886 li
137.988 138.396 li
ef
139.298 136.886 mo
88.498 136.886 li
88.3599 136.886 88.248 136.774 88.248 136.636 cv
88.248 136.498 88.3599 136.386 88.498 136.386 cv
139.298 136.386 li
139.436 136.386 139.548 136.498 139.548 136.636 cv
139.548 136.774 139.436 136.886 139.298 136.886 cv
f
93.738 95.6858 mo
91.768 92.1658 li
89.798 95.6858 li
93.738 95.6858 li
cp
ef
92.018 94.5158 mo
92.018 139.796 li
92.018 139.934 91.9061 140.046 91.768 140.046 cv
91.6299 140.046 91.518 139.934 91.518 139.796 cv
91.518 94.5158 li
91.518 94.3777 91.6299 94.2658 91.768 94.2658 cv
91.9061 94.2658 92.018 94.3777 92.018 94.5158 cv
f
137.988 138.396 mo
141.928 136.636 li
137.988 134.886 li
137.988 138.396 li
ef
139.298 136.886 mo
88.498 136.886 li
88.3599 136.886 88.248 136.774 88.248 136.636 cv
88.248 136.498 88.3599 136.386 88.498 136.386 cv
139.298 136.386 li
139.436 136.386 139.548 136.498 139.548 136.636 cv
139.548 136.774 139.436 136.886 139.298 136.886 cv
f
.25 lw
1 lc
1 lj
43.388 67.0558 mo
26.999 57.4658 li
.647 gry
@
41.908 51.2658 mo
26.999 57.4658 li
@
39.634 76.0258 mo
32.304 69.1658 li
@
50.007 73.1058 mo
43.388 67.0558 li
@
26.999 57.4658 mo
32.304 49.4158 li
@
43.656 59.2858 mo
41.908 51.2658 li
@
46.864 44.7258 mo
37.94 43.1458 li
@
59.428 67.2558 mo
53.348 65.8558 li
@
59.428 67.2558 mo
57.968 58.5458 li
@
41.908 51.2658 mo
46.864 44.7258 li
@
59.118 49.8458 mo
53.738 44.8458 li
@
57.968 58.5458 mo
59.118 50.6958 li
@
.75 lw
50.007 73.1058 mo
46.864 44.7258 li
0 gry
@
32.304 69.1658 mo
43.656 59.2858 li
@
32.304 49.4158 mo
43.864 59.0058 li
@
32.304 69.1658 mo
32.304 49.4158 li
@
50.007 73.1058 mo
32.304 69.1658 li
@
50.007 69.9058 mo
51.778 69.9058 53.218 71.3358 53.218 73.1058 cv
53.218 74.8858 51.778 76.3158 50.007 76.3158 cv
48.235 76.3158 46.799 74.8858 46.799 73.1058 cv
46.799 71.3358 48.235 69.9058 50.007 69.9058 cv
cp
.659 .816 .553 rgb
ef
2 lc
0 lj
2 ml
50.007 69.9058 mo
51.778 69.9058 53.218 71.3358 53.218 73.1058 cv
53.218 74.8858 51.778 76.3158 50.007 76.3158 cv
48.235 76.3158 46.799 74.8858 46.799 73.1058 cv
46.799 71.3358 48.235 69.9058 50.007 69.9058 cv
cp
.325 .506 .208 rgb
@
32.304 46.2158 mo
34.076 46.2158 35.512 47.6458 35.512 49.4158 cv
35.512 51.1958 34.076 52.6258 32.304 52.6258 cv
30.532 52.6258 29.095 51.1958 29.095 49.4158 cv
29.095 47.6458 30.532 46.2158 32.304 46.2158 cv
cp
.659 .816 .553 rgb
ef
32.304 46.2158 mo
34.076 46.2158 35.512 47.6458 35.512 49.4158 cv
35.512 51.1958 34.076 52.6258 32.304 52.6258 cv
30.532 52.6258 29.095 51.1958 29.095 49.4158 cv
29.095 47.6458 30.532 46.2158 32.304 46.2158 cv
cp
.325 .506 .208 rgb
@
46.241 44.4858 mo
59.398 59.5358 li
40.613 59.5358 li
0 gry
@
43.656 56.0858 mo
45.428 56.0858 46.864 57.5158 46.864 59.2858 cv
46.864 61.0658 45.428 62.4958 43.656 62.4958 cv
41.884 62.4958 40.448 61.0658 40.448 59.2858 cv
40.448 57.5158 41.884 56.0858 43.656 56.0858 cv
cp
1 .851 .396 rgb
ef
43.656 56.0858 mo
45.428 56.0858 46.864 57.5158 46.864 59.2858 cv
46.864 61.0658 45.428 62.4958 43.656 62.4958 cv
41.884 62.4958 40.448 61.0658 40.448 59.2858 cv
40.448 57.5158 41.884 56.0858 43.656 56.0858 cv
cp
.749 .565 0 rgb
@
46.864 41.5258 mo
48.636 41.5258 50.072 42.9558 50.072 44.7258 cv
50.072 46.5058 48.636 47.9358 46.864 47.9358 cv
45.092 47.9358 43.656 46.5058 43.656 44.7258 cv
43.656 42.9558 45.092 41.5258 46.864 41.5258 cv
cp
1 .851 .396 rgb
ef
46.864 41.5258 mo
48.636 41.5258 50.072 42.9558 50.072 44.7258 cv
50.072 46.5058 48.636 47.9358 46.864 47.9358 cv
45.092 47.9358 43.656 46.5058 43.656 44.7258 cv
43.656 42.9558 45.092 41.5258 46.864 41.5258 cv
cp
.749 .565 0 rgb
@
57.968 55.3458 mo
59.738 55.3458 61.178 56.7758 61.178 58.5458 cv
61.178 60.3258 59.738 61.7558 57.968 61.7558 cv
56.198 61.7558 54.758 60.3258 54.758 58.5458 cv
54.758 56.7758 56.198 55.3458 57.968 55.3458 cv
cp
1 .851 .396 rgb
ef
57.968 55.3458 mo
59.738 55.3458 61.178 56.7758 61.178 58.5458 cv
61.178 60.3258 59.738 61.7558 57.968 61.7558 cv
56.198 61.7558 54.758 60.3258 54.758 58.5458 cv
54.758 56.7758 56.198 55.3458 57.968 55.3458 cv
cp
.749 .565 0 rgb
@
32.304 65.9558 mo
34.076 65.9558 35.512 67.3858 35.512 69.1658 cv
35.512 70.9358 34.076 72.3658 32.304 72.3658 cv
30.532 72.3658 29.095 70.9358 29.095 69.1658 cv
29.095 67.3858 30.532 65.9558 32.304 65.9558 cv
cp
.659 .816 .553 rgb
ef
32.304 65.9558 mo
34.076 65.9558 35.512 67.3858 35.512 69.1658 cv
35.512 70.9358 34.076 72.3658 32.304 72.3658 cv
30.532 72.3658 29.095 70.9358 29.095 69.1658 cv
29.095 67.3858 30.532 65.9558 32.304 65.9558 cv
cp
.325 .506 .208 rgb
@
.5 lw
[2 1 ] 0 dsh
43.864 37.7458 mo
55.608 37.7458 65.128 47.2658 65.128 59.0058 cv
65.128 70.7458 55.608 80.2658 43.864 80.2658 cv
32.123 80.2658 22.604 70.7458 22.604 59.0058 cv
22.604 47.2658 32.123 37.7458 43.864 37.7458 cv
cp
0 gry
@
59.118 48.9958 mo
59.588 48.9958 59.958 49.3758 59.958 49.8458 cv
59.958 50.3158 59.588 50.6958 59.118 50.6958 cv
58.648 50.6958 58.268 50.3158 58.268 49.8458 cv
58.268 49.3758 58.648 48.9958 59.118 48.9958 cv
cp
.996 .898 .6 rgb
ef
[] 0 dsh
59.118 48.9958 mo
59.588 48.9958 59.958 49.3758 59.958 49.8458 cv
59.958 50.3158 59.588 50.6958 59.118 50.6958 cv
58.648 50.6958 58.268 50.3158 58.268 49.8458 cv
58.268 49.3758 58.648 48.9958 59.118 48.9958 cv
cp
.647 gry
@
41.908 50.4158 mo
42.376 50.4158 42.755 50.7958 42.755 51.2658 cv
42.755 51.7258 42.376 52.1058 41.908 52.1058 cv
41.44 52.1058 41.061 51.7258 41.061 51.2658 cv
41.061 50.7958 41.44 50.4158 41.908 50.4158 cv
cp
.996 .898 .6 rgb
ef
41.908 50.4158 mo
42.376 50.4158 42.755 50.7958 42.755 51.2658 cv
42.755 51.7258 42.376 52.1058 41.908 52.1058 cv
41.44 52.1058 41.061 51.7258 41.061 51.2658 cv
41.061 50.7958 41.44 50.4158 41.908 50.4158 cv
cp
.647 gry
@
53.738 43.9958 mo
54.198 43.9958 54.578 44.3758 54.578 44.8458 cv
54.578 45.3158 54.198 45.6858 53.738 45.6858 cv
53.268 45.6858 52.888 45.3158 52.888 44.8458 cv
52.888 44.3758 53.268 43.9958 53.738 43.9958 cv
cp
.996 .898 .6 rgb
ef
53.738 43.9958 mo
54.198 43.9958 54.578 44.3758 54.578 44.8458 cv
54.578 45.3158 54.198 45.6858 53.738 45.6858 cv
53.268 45.6858 52.888 45.3158 52.888 44.8458 cv
52.888 44.3758 53.268 43.9958 53.738 43.9958 cv
cp
.647 gry
@
59.428 66.4058 mo
59.898 66.4058 60.278 66.7858 60.278 67.2558 cv
60.278 67.7258 59.898 68.1058 59.428 68.1058 cv
58.958 68.1058 58.578 67.7258 58.578 67.2558 cv
58.578 66.7858 58.958 66.4058 59.428 66.4058 cv
cp
.996 .898 .6 rgb
ef
59.428 66.4058 mo
59.898 66.4058 60.278 66.7858 60.278 67.2558 cv
60.278 67.7258 59.898 68.1058 59.428 68.1058 cv
58.958 68.1058 58.578 67.7258 58.578 67.2558 cv
58.578 66.7858 58.958 66.4058 59.428 66.4058 cv
cp
.647 gry
@
53.348 65.0158 mo
53.818 65.0158 54.188 65.3958 54.188 65.8558 cv
54.188 66.3258 53.818 66.7058 53.348 66.7058 cv
52.878 66.7058 52.498 66.3258 52.498 65.8558 cv
52.498 65.3958 52.878 65.0158 53.348 65.0158 cv
cp
.996 .898 .6 rgb
ef
53.348 65.0158 mo
53.818 65.0158 54.188 65.3958 54.188 65.8558 cv
54.188 66.3258 53.818 66.7058 53.348 66.7058 cv
52.878 66.7058 52.498 66.3258 52.498 65.8558 cv
52.498 65.3958 52.878 65.0158 53.348 65.0158 cv
cp
.647 gry
@
37.94 42.3058 mo
38.408 42.3058 38.787 42.6858 38.787 43.1458 cv
38.787 43.6158 38.408 43.9958 37.94 43.9958 cv
37.472 43.9958 37.093 43.6158 37.093 43.1458 cv
37.093 42.6858 37.472 42.3058 37.94 42.3058 cv
cp
.996 .898 .6 rgb
ef
37.94 42.3058 mo
38.408 42.3058 38.787 42.6858 38.787 43.1458 cv
38.787 43.6158 38.408 43.9958 37.94 43.9958 cv
37.472 43.9958 37.093 43.6158 37.093 43.1458 cv
37.093 42.6858 37.472 42.3058 37.94 42.3058 cv
cp
.647 gry
@
26.999 56.6258 mo
27.467 56.6258 27.846 57.0058 27.846 57.4658 cv
27.846 57.9358 27.467 58.3158 26.999 58.3158 cv
26.531 58.3158 26.152 57.9358 26.152 57.4658 cv
26.152 57.0058 26.531 56.6258 26.999 56.6258 cv
cp
.659 .816 .553 rgb
ef
26.999 56.6258 mo
27.467 56.6258 27.846 57.0058 27.846 57.4658 cv
27.846 57.9358 27.467 58.3158 26.999 58.3158 cv
26.531 58.3158 26.152 57.9358 26.152 57.4658 cv
26.152 57.0058 26.531 56.6258 26.999 56.6258 cv
cp
.647 gry
@
43.388 66.2058 mo
43.856 66.2058 44.235 66.5858 44.235 67.0558 cv
44.235 67.5158 43.856 67.8958 43.388 67.8958 cv
42.92 67.8958 42.541 67.5158 42.541 67.0558 cv
42.541 66.5858 42.92 66.2058 43.388 66.2058 cv
cp
.659 .816 .553 rgb
ef
43.388 66.2058 mo
43.856 66.2058 44.235 66.5858 44.235 67.0558 cv
44.235 67.5158 43.856 67.8958 43.388 67.8958 cv
42.92 67.8958 42.541 67.5158 42.541 67.0558 cv
42.541 66.5858 42.92 66.2058 43.388 66.2058 cv
cp
.647 gry
@
39.634 75.1758 mo
40.102 75.1758 40.481 75.5558 40.481 76.0258 cv
40.481 76.4958 40.102 76.8658 39.634 76.8658 cv
39.166 76.8658 38.787 76.4958 38.787 76.0258 cv
38.787 75.5558 39.166 75.1758 39.634 75.1758 cv
cp
.659 .816 .553 rgb
ef
39.634 75.1758 mo
40.102 75.1758 40.481 75.5558 40.481 76.0258 cv
40.481 76.4958 40.102 76.8658 39.634 76.8658 cv
39.166 76.8658 38.787 76.4958 38.787 76.0258 cv
38.787 75.5558 39.166 75.1758 39.634 75.1758 cv
cp
.647 gry
@
.25 lw
1 lc
1 lj
10 ml
104.088 50.3158 mo
91.468 59.0058 li
@
91.468 59.0058 mo
96.088 69.1658 li
@
96.088 49.4158 mo
91.468 59.0058 li
@
96.088 69.1658 mo
101.038 75.2058 li
@
105.998 67.5558 mo
113.788 73.1058 li
@
102.198 42.9658 mo
110.648 44.7258 li
@
115.218 65.0158 mo
107.438 59.2858 li
@
123.188 66.4858 mo
115.218 65.0158 li
@
121.748 58.5458 mo
123.188 66.4858 li
@
104.088 50.3158 mo
107.438 59.2858 li
@
121.748 58.5458 mo
121.408 48.1558 li
@
.75 lw
2 lc
0 lj
2 ml
110.648 44.7258 mo
105.958 60.5258 li
96.088 70.6458 li
0 gry
@
1 lc
1 lj
10 ml
107.438 59.2858 mo
113.788 73.1058 li
@
96.088 69.1658 mo
96.088 49.4158 li
@
113.788 73.1058 mo
96.088 69.1658 li
@
113.788 69.9058 mo
115.558 69.9058 116.998 71.3358 116.998 73.1058 cv
116.998 74.8858 115.558 76.3158 113.788 76.3158 cv
112.018 76.3158 110.578 74.8858 110.578 73.1058 cv
110.578 71.3358 112.018 69.9058 113.788 69.9058 cv
cp
.969 .796 .675 rgb
ef
2 lc
0 lj
2 ml
113.788 69.9058 mo
115.558 69.9058 116.998 71.3358 116.998 73.1058 cv
116.998 74.8858 115.558 76.3158 113.788 76.3158 cv
112.018 76.3158 110.578 74.8858 110.578 73.1058 cv
110.578 71.3358 112.018 69.9058 113.788 69.9058 cv
cp
.929 .49 .192 rgb
@
96.088 46.2158 mo
97.858 46.2158 99.288 47.6458 99.288 49.4158 cv
99.288 51.1958 97.858 52.6258 96.088 52.6258 cv
94.308 52.6258 92.878 51.1958 92.878 49.4158 cv
92.878 47.6458 94.308 46.2158 96.088 46.2158 cv
cp
.969 .796 .675 rgb
ef
96.088 46.2158 mo
97.858 46.2158 99.288 47.6458 99.288 49.4158 cv
99.288 51.1958 97.858 52.6258 96.088 52.6258 cv
94.308 52.6258 92.878 51.1958 92.878 49.4158 cv
92.878 47.6458 94.308 46.2158 96.088 46.2158 cv
cp
.929 .49 .192 rgb
@
110.018 44.4858 mo
123.178 59.5358 li
104.388 59.5358 li
0 gry
@
107.438 56.0858 mo
109.208 56.0858 110.648 57.5158 110.648 59.2858 cv
110.648 61.0658 109.208 62.4958 107.438 62.4958 cv
105.668 62.4958 104.228 61.0658 104.228 59.2858 cv
104.228 57.5158 105.668 56.0858 107.438 56.0858 cv
cp
.565 .667 .859 rgb
ef
107.438 56.0858 mo
109.208 56.0858 110.648 57.5158 110.648 59.2858 cv
110.648 61.0658 109.208 62.4958 107.438 62.4958 cv
105.668 62.4958 104.228 61.0658 104.228 59.2858 cv
104.228 57.5158 105.668 56.0858 107.438 56.0858 cv
cp
.275 .447 .769 rgb
@
110.648 41.5258 mo
112.418 41.5258 113.848 42.9558 113.848 44.7258 cv
113.848 46.5058 112.418 47.9358 110.648 47.9358 cv
108.868 47.9358 107.438 46.5058 107.438 44.7258 cv
107.438 42.9558 108.868 41.5258 110.648 41.5258 cv
cp
.565 .667 .859 rgb
ef
110.648 41.5258 mo
112.418 41.5258 113.848 42.9558 113.848 44.7258 cv
113.848 46.5058 112.418 47.9358 110.648 47.9358 cv
108.868 47.9358 107.438 46.5058 107.438 44.7258 cv
107.438 42.9558 108.868 41.5258 110.648 41.5258 cv
cp
.275 .447 .769 rgb
@
121.748 55.3458 mo
123.518 55.3458 124.958 56.7758 124.958 58.5458 cv
124.958 60.3258 123.518 61.7558 121.748 61.7558 cv
119.978 61.7558 118.538 60.3258 118.538 58.5458 cv
118.538 56.7758 119.978 55.3458 121.748 55.3458 cv
cp
.565 .667 .859 rgb
ef
121.748 55.3458 mo
123.518 55.3458 124.958 56.7758 124.958 58.5458 cv
124.958 60.3258 123.518 61.7558 121.748 61.7558 cv
119.978 61.7558 118.538 60.3258 118.538 58.5458 cv
118.538 56.7758 119.978 55.3458 121.748 55.3458 cv
cp
.275 .447 .769 rgb
@
96.088 65.9558 mo
97.858 65.9558 99.288 67.3858 99.288 69.1658 cv
99.288 70.9358 97.858 72.3658 96.088 72.3658 cv
94.308 72.3658 92.878 70.9358 92.878 69.1658 cv
92.878 67.3858 94.308 65.9558 96.088 65.9558 cv
cp
.969 .796 .675 rgb
ef
96.088 65.9558 mo
97.858 65.9558 99.288 67.3858 99.288 69.1658 cv
99.288 70.9358 97.858 72.3658 96.088 72.3658 cv
94.308 72.3658 92.878 70.9358 92.878 69.1658 cv
92.878 67.3858 94.308 65.9558 96.088 65.9558 cv
cp
.929 .49 .192 rgb
@
.5 lw
[2 1 ] 0 dsh
107.648 37.7458 mo
119.388 37.7458 128.908 47.2658 128.908 59.0058 cv
128.908 70.7458 119.388 80.2658 107.648 80.2658 cv
95.898 80.2658 86.388 70.7458 86.388 59.0058 cv
86.388 47.2658 95.898 37.7458 107.648 37.7458 cv
cp
0 gry
@
121.408 47.3058 mo
121.878 47.3058 122.258 47.6858 122.258 48.1558 cv
122.258 48.6158 121.878 48.9958 121.408 48.9958 cv
120.938 48.9958 120.558 48.6158 120.558 48.1558 cv
120.558 47.6858 120.938 47.3058 121.408 47.3058 cv
cp
0 .996 .996 rgb
ef
[] 0 dsh
121.408 47.3058 mo
121.878 47.3058 122.258 47.6858 122.258 48.1558 cv
122.258 48.6158 121.878 48.9958 121.408 48.9958 cv
120.938 48.9958 120.558 48.6158 120.558 48.1558 cv
120.558 47.6858 120.938 47.3058 121.408 47.3058 cv
cp
.647 gry
@
104.088 49.4658 mo
104.558 49.4658 104.938 49.8458 104.938 50.3158 cv
104.938 50.7858 104.558 51.1558 104.088 51.1558 cv
103.628 51.1558 103.248 50.7858 103.248 50.3158 cv
103.248 49.8458 103.628 49.4658 104.088 49.4658 cv
cp
0 .996 .996 rgb
ef
104.088 49.4658 mo
104.558 49.4658 104.938 49.8458 104.938 50.3158 cv
104.938 50.7858 104.558 51.1558 104.088 51.1558 cv
103.628 51.1558 103.248 50.7858 103.248 50.3158 cv
103.248 49.8458 103.628 49.4658 104.088 49.4658 cv
cp
.647 gry
@
123.188 65.6358 mo
123.648 65.6358 124.028 66.0158 124.028 66.4858 cv
124.028 66.9558 123.648 67.3358 123.188 67.3358 cv
122.718 67.3358 122.338 66.9558 122.338 66.4858 cv
122.338 66.0158 122.718 65.6358 123.188 65.6358 cv
cp
0 .996 .996 rgb
ef
123.188 65.6358 mo
123.648 65.6358 124.028 66.0158 124.028 66.4858 cv
124.028 66.9558 123.648 67.3358 123.188 67.3358 cv
122.718 67.3358 122.338 66.9558 122.338 66.4858 cv
122.338 66.0158 122.718 65.6358 123.188 65.6358 cv
cp
.647 gry
@
105.998 66.7058 mo
106.468 66.7058 106.848 67.0858 106.848 67.5558 cv
106.848 68.0258 106.468 68.3958 105.998 68.3958 cv
105.528 68.3958 105.158 68.0258 105.158 67.5558 cv
105.158 67.0858 105.528 66.7058 105.998 66.7058 cv
cp
0 .996 .996 rgb
ef
105.998 66.7058 mo
106.468 66.7058 106.848 67.0858 106.848 67.5558 cv
106.848 68.0258 106.468 68.3958 105.998 68.3958 cv
105.528 68.3958 105.158 68.0258 105.158 67.5558 cv
105.158 67.0858 105.528 66.7058 105.998 66.7058 cv
cp
.647 gry
@
115.218 64.1658 mo
115.688 64.1658 116.068 64.5458 116.068 65.0158 cv
116.068 65.4758 115.688 65.8558 115.218 65.8558 cv
114.758 65.8558 114.378 65.4758 114.378 65.0158 cv
114.378 64.5458 114.758 64.1658 115.218 64.1658 cv
cp
0 .996 .996 rgb
ef
115.218 64.1658 mo
115.688 64.1658 116.068 64.5458 116.068 65.0158 cv
116.068 65.4758 115.688 65.8558 115.218 65.8558 cv
114.758 65.8558 114.378 65.4758 114.378 65.0158 cv
114.378 64.5458 114.758 64.1658 115.218 64.1658 cv
cp
.647 gry
@
102.198 42.1258 mo
102.668 42.1258 103.048 42.5058 103.048 42.9658 cv
103.048 43.4358 102.668 43.8158 102.198 43.8158 cv
101.728 43.8158 101.348 43.4358 101.348 42.9658 cv
101.348 42.5058 101.728 42.1258 102.198 42.1258 cv
cp
0 .996 .996 rgb
ef
102.198 42.1258 mo
102.668 42.1258 103.048 42.5058 103.048 42.9658 cv
103.048 43.4358 102.668 43.8158 102.198 43.8158 cv
101.728 43.8158 101.348 43.4358 101.348 42.9658 cv
101.348 42.5058 101.728 42.1258 102.198 42.1258 cv
cp
.647 gry
@
101.038 74.3558 mo
101.508 74.3558 101.888 74.7358 101.888 75.2058 cv
101.888 75.6658 101.508 76.0458 101.038 76.0458 cv
100.568 76.0458 100.198 75.6658 100.198 75.2058 cv
100.198 74.7358 100.568 74.3558 101.038 74.3558 cv
cp
0 .996 .996 rgb
ef
101.038 74.3558 mo
101.508 74.3558 101.888 74.7358 101.888 75.2058 cv
101.888 75.6658 101.508 76.0458 101.038 76.0458 cv
100.568 76.0458 100.198 75.6658 100.198 75.2058 cv
100.198 74.7358 100.568 74.3558 101.038 74.3558 cv
cp
.647 gry
@
91.468 58.1558 mo
91.938 58.1558 92.308 58.5358 92.308 59.0058 cv
92.308 59.4758 91.938 59.8558 91.468 59.8558 cv
90.998 59.8558 90.618 59.4758 90.618 59.0058 cv
90.618 58.5358 90.998 58.1558 91.468 58.1558 cv
cp
0 .996 .996 rgb
ef
91.468 58.1558 mo
91.938 58.1558 92.308 58.5358 92.308 59.0058 cv
92.308 59.4758 91.938 59.8558 91.468 59.8558 cv
90.998 59.8558 90.618 59.4758 90.618 59.0058 cv
90.618 58.5358 90.998 58.1558 91.468 58.1558 cv
cp
.647 gry
@
.25 lw
1 lc
1 lj
10 ml
104.088 50.3158 mo
91.468 59.0058 li
@
91.468 59.0058 mo
96.088 69.1658 li
@
96.088 49.4158 mo
91.468 59.0058 li
@
96.088 69.1658 mo
101.038 75.2058 li
@
105.998 67.5558 mo
113.788 73.1058 li
@
102.198 42.9658 mo
110.648 44.7258 li
@
115.218 65.0158 mo
107.438 59.2858 li
@
123.188 66.4858 mo
115.218 65.0158 li
@
121.748 58.5458 mo
123.188 66.4858 li
@
104.088 50.3158 mo
107.438 59.2858 li
@
121.748 58.5458 mo
121.408 48.1558 li
@
.75 lw
2 lc
0 lj
2 ml
110.648 44.7258 mo
105.958 60.5258 li
96.088 70.6458 li
0 gry
@
1 lc
1 lj
10 ml
107.438 59.2858 mo
113.788 73.1058 li
@
96.088 69.1658 mo
96.088 49.4158 li
@
113.788 73.1058 mo
96.088 69.1658 li
@
113.788 69.9058 mo
115.558 69.9058 116.998 71.3358 116.998 73.1058 cv
116.998 74.8858 115.558 76.3158 113.788 76.3158 cv
112.018 76.3158 110.578 74.8858 110.578 73.1058 cv
110.578 71.3358 112.018 69.9058 113.788 69.9058 cv
cp
.969 .796 .675 rgb
ef
2 lc
0 lj
2 ml
113.788 69.9058 mo
115.558 69.9058 116.998 71.3358 116.998 73.1058 cv
116.998 74.8858 115.558 76.3158 113.788 76.3158 cv
112.018 76.3158 110.578 74.8858 110.578 73.1058 cv
110.578 71.3358 112.018 69.9058 113.788 69.9058 cv
cp
.929 .49 .192 rgb
@
96.088 46.2158 mo
97.858 46.2158 99.288 47.6458 99.288 49.4158 cv
99.288 51.1958 97.858 52.6258 96.088 52.6258 cv
94.308 52.6258 92.878 51.1958 92.878 49.4158 cv
92.878 47.6458 94.308 46.2158 96.088 46.2158 cv
cp
.969 .796 .675 rgb
ef
96.088 46.2158 mo
97.858 46.2158 99.288 47.6458 99.288 49.4158 cv
99.288 51.1958 97.858 52.6258 96.088 52.6258 cv
94.308 52.6258 92.878 51.1958 92.878 49.4158 cv
92.878 47.6458 94.308 46.2158 96.088 46.2158 cv
cp
.929 .49 .192 rgb
@
110.018 44.4858 mo
123.178 59.5358 li
104.388 59.5358 li
0 gry
@
107.438 56.0858 mo
109.208 56.0858 110.648 57.5158 110.648 59.2858 cv
110.648 61.0658 109.208 62.4958 107.438 62.4958 cv
105.668 62.4958 104.228 61.0658 104.228 59.2858 cv
104.228 57.5158 105.668 56.0858 107.438 56.0858 cv
cp
.565 .667 .859 rgb
ef
107.438 56.0858 mo
109.208 56.0858 110.648 57.5158 110.648 59.2858 cv
110.648 61.0658 109.208 62.4958 107.438 62.4958 cv
105.668 62.4958 104.228 61.0658 104.228 59.2858 cv
104.228 57.5158 105.668 56.0858 107.438 56.0858 cv
cp
.275 .447 .769 rgb
@
110.648 41.5258 mo
112.418 41.5258 113.848 42.9558 113.848 44.7258 cv
113.848 46.5058 112.418 47.9358 110.648 47.9358 cv
108.868 47.9358 107.438 46.5058 107.438 44.7258 cv
107.438 42.9558 108.868 41.5258 110.648 41.5258 cv
cp
.565 .667 .859 rgb
ef
110.648 41.5258 mo
112.418 41.5258 113.848 42.9558 113.848 44.7258 cv
113.848 46.5058 112.418 47.9358 110.648 47.9358 cv
108.868 47.9358 107.438 46.5058 107.438 44.7258 cv
107.438 42.9558 108.868 41.5258 110.648 41.5258 cv
cp
.275 .447 .769 rgb
@
121.748 55.3458 mo
123.518 55.3458 124.958 56.7758 124.958 58.5458 cv
124.958 60.3258 123.518 61.7558 121.748 61.7558 cv
119.978 61.7558 118.538 60.3258 118.538 58.5458 cv
118.538 56.7758 119.978 55.3458 121.748 55.3458 cv
cp
.565 .667 .859 rgb
ef
121.748 55.3458 mo
123.518 55.3458 124.958 56.7758 124.958 58.5458 cv
124.958 60.3258 123.518 61.7558 121.748 61.7558 cv
119.978 61.7558 118.538 60.3258 118.538 58.5458 cv
118.538 56.7758 119.978 55.3458 121.748 55.3458 cv
cp
.275 .447 .769 rgb
@
96.088 65.9558 mo
97.858 65.9558 99.288 67.3858 99.288 69.1658 cv
99.288 70.9358 97.858 72.3658 96.088 72.3658 cv
94.308 72.3658 92.878 70.9358 92.878 69.1658 cv
92.878 67.3858 94.308 65.9558 96.088 65.9558 cv
cp
.969 .796 .675 rgb
ef
96.088 65.9558 mo
97.858 65.9558 99.288 67.3858 99.288 69.1658 cv
99.288 70.9358 97.858 72.3658 96.088 72.3658 cv
94.308 72.3658 92.878 70.9358 92.878 69.1658 cv
92.878 67.3858 94.308 65.9558 96.088 65.9558 cv
cp
.929 .49 .192 rgb
@
.5 lw
[2 1 ] 0 dsh
107.648 37.7458 mo
119.388 37.7458 128.908 47.2658 128.908 59.0058 cv
128.908 70.7458 119.388 80.2658 107.648 80.2658 cv
95.898 80.2658 86.388 70.7458 86.388 59.0058 cv
86.388 47.2658 95.898 37.7458 107.648 37.7458 cv
cp
0 gry
@
121.408 47.3058 mo
121.878 47.3058 122.258 47.6858 122.258 48.1558 cv
122.258 48.6158 121.878 48.9958 121.408 48.9958 cv
120.938 48.9958 120.558 48.6158 120.558 48.1558 cv
120.558 47.6858 120.938 47.3058 121.408 47.3058 cv
cp
0 .996 .996 rgb
ef
[] 0 dsh
121.408 47.3058 mo
121.878 47.3058 122.258 47.6858 122.258 48.1558 cv
122.258 48.6158 121.878 48.9958 121.408 48.9958 cv
120.938 48.9958 120.558 48.6158 120.558 48.1558 cv
120.558 47.6858 120.938 47.3058 121.408 47.3058 cv
cp
.647 gry
@
104.088 49.4658 mo
104.558 49.4658 104.938 49.8458 104.938 50.3158 cv
104.938 50.7858 104.558 51.1558 104.088 51.1558 cv
103.628 51.1558 103.248 50.7858 103.248 50.3158 cv
103.248 49.8458 103.628 49.4658 104.088 49.4658 cv
cp
0 .996 .996 rgb
ef
104.088 49.4658 mo
104.558 49.4658 104.938 49.8458 104.938 50.3158 cv
104.938 50.7858 104.558 51.1558 104.088 51.1558 cv
103.628 51.1558 103.248 50.7858 103.248 50.3158 cv
103.248 49.8458 103.628 49.4658 104.088 49.4658 cv
cp
.647 gry
@
123.188 65.6358 mo
123.648 65.6358 124.028 66.0158 124.028 66.4858 cv
124.028 66.9558 123.648 67.3358 123.188 67.3358 cv
122.718 67.3358 122.338 66.9558 122.338 66.4858 cv
122.338 66.0158 122.718 65.6358 123.188 65.6358 cv
cp
0 .996 .996 rgb
ef
123.188 65.6358 mo
123.648 65.6358 124.028 66.0158 124.028 66.4858 cv
124.028 66.9558 123.648 67.3358 123.188 67.3358 cv
122.718 67.3358 122.338 66.9558 122.338 66.4858 cv
122.338 66.0158 122.718 65.6358 123.188 65.6358 cv
cp
.647 gry
@
105.998 66.7058 mo
106.468 66.7058 106.848 67.0858 106.848 67.5558 cv
106.848 68.0258 106.468 68.3958 105.998 68.3958 cv
105.528 68.3958 105.158 68.0258 105.158 67.5558 cv
105.158 67.0858 105.528 66.7058 105.998 66.7058 cv
cp
0 .996 .996 rgb
ef
105.998 66.7058 mo
106.468 66.7058 106.848 67.0858 106.848 67.5558 cv
106.848 68.0258 106.468 68.3958 105.998 68.3958 cv
105.528 68.3958 105.158 68.0258 105.158 67.5558 cv
105.158 67.0858 105.528 66.7058 105.998 66.7058 cv
cp
.647 gry
@
115.218 64.1658 mo
115.688 64.1658 116.068 64.5458 116.068 65.0158 cv
116.068 65.4758 115.688 65.8558 115.218 65.8558 cv
114.758 65.8558 114.378 65.4758 114.378 65.0158 cv
114.378 64.5458 114.758 64.1658 115.218 64.1658 cv
cp
0 .996 .996 rgb
ef
115.218 64.1658 mo
115.688 64.1658 116.068 64.5458 116.068 65.0158 cv
116.068 65.4758 115.688 65.8558 115.218 65.8558 cv
114.758 65.8558 114.378 65.4758 114.378 65.0158 cv
114.378 64.5458 114.758 64.1658 115.218 64.1658 cv
cp
.647 gry
@
102.198 42.1258 mo
102.668 42.1258 103.048 42.5058 103.048 42.9658 cv
103.048 43.4358 102.668 43.8158 102.198 43.8158 cv
101.728 43.8158 101.348 43.4358 101.348 42.9658 cv
101.348 42.5058 101.728 42.1258 102.198 42.1258 cv
cp
0 .996 .996 rgb
ef
102.198 42.1258 mo
102.668 42.1258 103.048 42.5058 103.048 42.9658 cv
103.048 43.4358 102.668 43.8158 102.198 43.8158 cv
101.728 43.8158 101.348 43.4358 101.348 42.9658 cv
101.348 42.5058 101.728 42.1258 102.198 42.1258 cv
cp
.647 gry
@
101.038 74.3558 mo
101.508 74.3558 101.888 74.7358 101.888 75.2058 cv
101.888 75.6658 101.508 76.0458 101.038 76.0458 cv
100.568 76.0458 100.198 75.6658 100.198 75.2058 cv
100.198 74.7358 100.568 74.3558 101.038 74.3558 cv
cp
0 .996 .996 rgb
ef
101.038 74.3558 mo
101.508 74.3558 101.888 74.7358 101.888 75.2058 cv
101.888 75.6658 101.508 76.0458 101.038 76.0458 cv
100.568 76.0458 100.198 75.6658 100.198 75.2058 cv
100.198 74.7358 100.568 74.3558 101.038 74.3558 cv
cp
.647 gry
@
91.468 58.1558 mo
91.938 58.1558 92.308 58.5358 92.308 59.0058 cv
92.308 59.4758 91.938 59.8558 91.468 59.8558 cv
90.998 59.8558 90.618 59.4758 90.618 59.0058 cv
90.618 58.5358 90.998 58.1558 91.468 58.1558 cv
cp
0 .996 .996 rgb
ef
91.468 58.1558 mo
91.938 58.1558 92.308 58.5358 92.308 59.0058 cv
92.308 59.4758 91.938 59.8558 91.468 59.8558 cv
90.998 59.8558 90.618 59.4758 90.618 59.0058 cv
90.618 58.5358 90.998 58.1558 91.468 58.1558 cv
cp
.647 gry
@
93.308 126.016 mo
93.768 126.016 94.148 126.396 94.148 126.856 cv
94.148 127.326 93.768 127.706 93.308 127.706 cv
92.838 127.706 92.4579 127.326 92.4579 126.856 cv
92.4579 126.396 92.838 126.016 93.308 126.016 cv
.957 .694 .514 rgb
ef
93.558 118.756 mo
94.0179 118.756 94.398 119.136 94.398 119.606 cv
94.398 120.076 94.0179 120.456 93.558 120.456 cv
93.088 120.456 92.708 120.076 92.708 119.606 cv
92.708 119.136 93.088 118.756 93.558 118.756 cv
ef
99.558 122.676 mo
100.028 122.676 100.408 123.056 100.408 123.526 cv
100.408 123.996 100.028 124.376 99.558 124.376 cv
99.088 124.376 98.7079 123.996 98.7079 123.526 cv
98.7079 123.056 99.088 122.676 99.558 122.676 cv
ef
101.138 129.096 mo
101.608 129.096 101.988 129.476 101.988 129.946 cv
101.988 130.416 101.608 130.796 101.138 130.796 cv
100.668 130.796 100.298 130.416 100.298 129.946 cv
100.298 129.476 100.668 129.096 101.138 129.096 cv
ef
101.228 115.006 mo
101.688 115.006 102.068 115.386 102.068 115.856 cv
102.068 116.326 101.688 116.706 101.228 116.706 cv
100.758 116.706 100.378 116.326 100.378 115.856 cv
100.378 115.386 100.758 115.006 101.228 115.006 cv
ef
103.978 124.266 mo
104.438 124.266 104.818 124.646 104.818 125.106 cv
104.818 125.576 104.438 125.956 103.978 125.956 cv
103.508 125.956 103.128 125.576 103.128 125.106 cv
103.128 124.646 103.508 124.266 103.978 124.266 cv
ef
103.478 118.006 mo
103.938 118.006 104.318 118.386 104.318 118.856 cv
104.318 119.326 103.938 119.706 103.478 119.706 cv
103.008 119.706 102.628 119.326 102.628 118.856 cv
102.628 118.386 103.008 118.006 103.478 118.006 cv
ef
123.038 137.566 mo
123.498 137.566 123.878 137.946 123.878 138.416 cv
123.878 138.886 123.498 139.266 123.038 139.266 cv
122.568 139.266 122.188 138.886 122.188 138.416 cv
122.188 137.946 122.568 137.566 123.038 137.566 cv
.659 .816 .553 rgb
ef
97.058 110.936 mo
97.528 110.936 97.898 111.316 97.898 111.786 cv
97.898 112.246 97.528 112.626 97.058 112.626 cv
96.5879 112.626 96.208 112.246 96.208 111.786 cv
96.208 111.316 96.5879 110.936 97.058 110.936 cv
.957 .694 .514 rgb
ef
105.388 103.916 mo
105.858 103.916 106.238 104.296 106.238 104.766 cv
106.238 105.236 105.858 105.616 105.388 105.616 cv
104.928 105.616 104.548 105.236 104.548 104.766 cv
104.548 104.296 104.928 103.916 105.388 103.916 cv
.612 .765 .898 rgb
ef
108.308 112.176 mo
108.778 112.176 109.158 112.556 109.158 113.016 cv
109.158 113.486 108.778 113.866 108.308 113.866 cv
107.838 113.866 107.468 113.486 107.468 113.016 cv
107.468 112.556 107.838 112.176 108.308 112.176 cv
.957 .694 .514 rgb
ef
116.898 108.336 mo
117.368 108.336 117.748 108.716 117.748 109.186 cv
117.748 109.656 117.368 110.036 116.898 110.036 cv
116.428 110.036 116.048 109.656 116.048 109.186 cv
116.048 108.716 116.428 108.336 116.898 108.336 cv
.612 .765 .898 rgb
ef
112.148 100.336 mo
112.618 100.336 112.988 100.716 112.988 101.186 cv
112.988 101.646 112.618 102.026 112.148 102.026 cv
111.678 102.026 111.298 101.646 111.298 101.186 cv
111.298 100.716 111.678 100.336 112.148 100.336 cv
ef
120.318 116.096 mo
120.788 116.096 121.168 116.466 121.168 116.936 cv
121.168 117.406 120.788 117.786 120.318 117.786 cv
119.848 117.786 119.468 117.406 119.468 116.936 cv
119.468 116.466 119.848 116.096 120.318 116.096 cv
.659 .816 .553 rgb
ef
131.948 135.026 mo
132.418 135.026 132.798 135.406 132.798 135.876 cv
132.798 136.346 132.418 136.726 131.948 136.726 cv
131.478 136.726 131.098 136.346 131.098 135.876 cv
131.098 135.406 131.478 135.026 131.948 135.026 cv
ef
122.738 119.096 mo
123.198 119.096 123.578 119.476 123.578 119.936 cv
123.578 120.406 123.198 120.786 122.738 120.786 cv
122.268 120.786 121.888 120.406 121.888 119.936 cv
121.888 119.476 122.268 119.096 122.738 119.096 cv
ef
134.368 138.036 mo
134.828 138.036 135.208 138.416 135.208 138.876 cv
135.208 139.346 134.828 139.726 134.368 139.726 cv
133.898 139.726 133.518 139.346 133.518 138.876 cv
133.518 138.416 133.898 138.036 134.368 138.036 cv
ef
120.318 126.346 mo
120.788 126.346 121.168 126.726 121.168 127.196 cv
121.168 127.666 120.788 128.036 120.318 128.036 cv
119.848 128.036 119.468 127.666 119.468 127.196 cv
119.468 126.726 119.848 126.346 120.318 126.346 cv
ef
124.648 130.506 mo
125.118 130.506 125.498 130.886 125.498 131.346 cv
125.498 131.816 125.118 132.196 124.648 132.196 cv
124.188 132.196 123.808 131.816 123.808 131.346 cv
123.808 130.886 124.188 130.506 124.648 130.506 cv
ef
127.148 122.016 mo
127.618 122.016 127.998 122.386 127.998 122.856 cv
127.998 123.326 127.618 123.706 127.148 123.706 cv
126.688 123.706 126.308 123.326 126.308 122.856 cv
126.308 122.386 126.688 122.016 127.148 122.016 cv
ef
126.648 114.256 mo
127.118 114.256 127.498 114.636 127.498 115.106 cv
127.498 115.576 127.118 115.956 126.648 115.956 cv
126.188 115.956 125.808 115.576 125.808 115.106 cv
125.808 114.636 126.188 114.256 126.648 114.256 cv
ef
129.818 117.596 mo
130.288 117.596 130.668 117.976 130.668 118.436 cv
130.668 118.906 130.288 119.286 129.818 119.286 cv
129.348 119.286 128.978 118.906 128.978 118.436 cv
128.978 117.976 129.348 117.596 129.818 117.596 cv
ef
131.818 124.676 mo
132.288 124.676 132.668 125.056 132.668 125.526 cv
132.668 125.996 132.288 126.376 131.818 126.376 cv
131.358 126.376 130.978 125.996 130.978 125.526 cv
130.978 125.056 131.358 124.676 131.818 124.676 cv
ef
126.398 125.676 mo
126.868 125.676 127.248 126.056 127.248 126.526 cv
127.248 126.996 126.868 127.376 126.398 127.376 cv
125.938 127.376 125.558 126.996 125.558 126.526 cv
125.558 126.056 125.938 125.676 126.398 125.676 cv
ef
136.828 125.926 mo
137.288 125.926 137.668 126.306 137.668 126.776 cv
137.668 127.246 137.288 127.626 136.828 127.626 cv
136.358 127.626 135.978 127.246 135.978 126.776 cv
135.978 126.306 136.358 125.926 136.828 125.926 cv
ef
113.728 104.086 mo
114.198 104.086 114.578 104.466 114.578 104.936 cv
114.578 105.406 114.198 105.776 113.728 105.776 cv
113.258 105.776 112.878 105.406 112.878 104.936 cv
112.878 104.466 113.258 104.086 113.728 104.086 cv
.612 .765 .898 rgb
ef
118.898 99.0858 mo
119.368 99.0858 119.748 99.4658 119.748 99.9258 cv
119.748 100.396 119.368 100.776 118.898 100.776 cv
118.428 100.776 118.048 100.396 118.048 99.9258 cv
118.048 99.4658 118.428 99.0858 118.898 99.0858 cv
ef
118.648 102.416 mo
119.118 102.416 119.498 102.796 119.498 103.266 cv
119.498 103.736 119.118 104.116 118.648 104.116 cv
118.178 104.116 117.798 103.736 117.798 103.266 cv
117.798 102.796 118.178 102.416 118.648 102.416 cv
ef
132.908 115.676 mo
133.368 115.676 133.748 116.056 133.748 116.526 cv
133.748 116.986 133.368 117.366 132.908 117.366 cv
132.438 117.366 132.058 116.986 132.058 116.526 cv
132.058 116.056 132.438 115.676 132.908 115.676 cv
.659 .816 .553 rgb
ef
135.828 119.506 mo
136.288 119.506 136.668 119.886 136.668 120.356 cv
136.668 120.826 136.288 121.206 135.828 121.206 cv
135.358 121.206 134.978 120.826 134.978 120.356 cv
134.978 119.886 135.358 119.506 135.828 119.506 cv
ef
121.318 99.4958 mo
121.788 99.4958 122.168 99.8758 122.168 100.346 cv
122.168 100.816 121.788 101.196 121.318 101.196 cv
120.848 101.196 120.468 100.816 120.468 100.346 cv
120.468 99.8758 120.848 99.4958 121.318 99.4958 cv
.612 .765 .898 rgb
ef
123.318 103.916 mo
123.788 103.916 124.168 104.296 124.168 104.766 cv
124.168 105.236 123.788 105.616 123.318 105.616 cv
122.848 105.616 122.468 105.236 122.468 104.766 cv
122.468 104.296 122.848 103.916 123.318 103.916 cv
ef
96.8594 134.547 mo
95.1313 134.547 93.5029 134.087 92.118 133.116 cv
92.0844 133.092 92.0511 133.069 92.018 133.045 cv
92.018 114.948 li
94.4712 111.5 97.7273 109.14 100.95 108.162 cv
102.018 111.675 104.87 115.19 108.988 117.566 cv
110.111 118.214 111.26 118.738 112.41 119.14 cv
112.024 121.779 110.935 124.56 109.138 127.126 cv
105.844 131.83 101.058 134.547 96.8594 134.547 cv
101.138 129.096 mo
100.668 129.096 100.298 129.476 100.298 129.946 cv
100.298 130.416 100.668 130.796 101.138 130.796 cv
101.608 130.796 101.988 130.416 101.988 129.946 cv
101.988 129.476 101.608 129.096 101.138 129.096 cv
93.308 126.016 mo
92.838 126.016 92.4579 126.396 92.4579 126.856 cv
92.4579 127.326 92.838 127.706 93.308 127.706 cv
93.768 127.706 94.148 127.326 94.148 126.856 cv
94.148 126.396 93.768 126.016 93.308 126.016 cv
103.978 124.266 mo
103.508 124.266 103.128 124.646 103.128 125.106 cv
103.128 125.576 103.508 125.956 103.978 125.956 cv
104.438 125.956 104.818 125.576 104.818 125.106 cv
104.818 124.646 104.438 124.266 103.978 124.266 cv
99.558 122.676 mo
99.088 122.676 98.7079 123.056 98.7079 123.526 cv
98.7079 123.996 99.088 124.376 99.558 124.376 cv
100.028 124.376 100.408 123.996 100.408 123.526 cv
100.408 123.056 100.028 122.676 99.558 122.676 cv
93.558 118.756 mo
93.088 118.756 92.708 119.136 92.708 119.606 cv
92.708 120.076 93.088 120.456 93.558 120.456 cv
94.0179 120.456 94.398 120.076 94.398 119.606 cv
94.398 119.136 94.0179 118.756 93.558 118.756 cv
103.478 118.006 mo
103.008 118.006 102.628 118.386 102.628 118.856 cv
102.628 119.326 103.008 119.706 103.478 119.706 cv
103.938 119.706 104.318 119.326 104.318 118.856 cv
104.318 118.386 103.938 118.006 103.478 118.006 cv
101.228 115.006 mo
100.758 115.006 100.378 115.386 100.378 115.856 cv
100.378 116.326 100.758 116.706 101.228 116.706 cv
101.688 116.706 102.068 116.326 102.068 115.856 cv
102.068 115.386 101.688 115.006 101.228 115.006 cv
97.058 110.936 mo
96.5879 110.936 96.208 111.316 96.208 111.786 cv
96.208 112.246 96.5879 112.626 97.058 112.626 cv
97.528 112.626 97.898 112.246 97.898 111.786 cv
97.898 111.316 97.528 110.936 97.058 110.936 cv
91.518 132.65 mo
87.5019 129.201 87.4887 121.907 91.518 115.685 cv
91.518 132.65 li
.991373 .938824 .902745 rgb
f
92.018 133.045 mo
91.845 132.92 91.6782 132.788 91.518 132.65 cv
91.518 115.685 li
91.6503 115.481 91.787 115.278 91.928 115.076 cv
91.9578 115.033 91.9879 114.991 92.018 114.948 cv
92.018 133.045 li
.411765 .498039 .717647 rgb
f
93.308 127.706 mo
92.838 127.706 92.4579 127.326 92.4579 126.856 cv
92.4579 126.396 92.838 126.016 93.308 126.016 cv
93.768 126.016 94.148 126.396 94.148 126.856 cv
94.148 127.326 93.768 127.706 93.308 127.706 cv
.956863 .694118 .513725 rgb
f
93.558 120.456 mo
93.088 120.456 92.708 120.076 92.708 119.606 cv
92.708 119.136 93.088 118.756 93.558 118.756 cv
94.0179 118.756 94.398 119.136 94.398 119.606 cv
94.398 120.076 94.0179 120.456 93.558 120.456 cv
f
99.558 124.376 mo
99.088 124.376 98.7079 123.996 98.7079 123.526 cv
98.7079 123.056 99.088 122.676 99.558 122.676 cv
100.028 122.676 100.408 123.056 100.408 123.526 cv
100.408 123.996 100.028 124.376 99.558 124.376 cv
f
101.138 130.796 mo
100.668 130.796 100.298 130.416 100.298 129.946 cv
100.298 129.476 100.668 129.096 101.138 129.096 cv
101.608 129.096 101.988 129.476 101.988 129.946 cv
101.988 130.416 101.608 130.796 101.138 130.796 cv
f
101.228 116.706 mo
100.758 116.706 100.378 116.326 100.378 115.856 cv
100.378 115.386 100.758 115.006 101.228 115.006 cv
101.688 115.006 102.068 115.386 102.068 115.856 cv
102.068 116.326 101.688 116.706 101.228 116.706 cv
f
103.978 125.956 mo
103.508 125.956 103.128 125.576 103.128 125.106 cv
103.128 124.646 103.508 124.266 103.978 124.266 cv
104.438 124.266 104.818 124.646 104.818 125.106 cv
104.818 125.576 104.438 125.956 103.978 125.956 cv
f
103.478 119.706 mo
103.008 119.706 102.628 119.326 102.628 118.856 cv
102.628 118.386 103.008 118.006 103.478 118.006 cv
103.938 118.006 104.318 118.386 104.318 118.856 cv
104.318 119.326 103.938 119.706 103.478 119.706 cv
f
97.058 112.626 mo
96.5879 112.626 96.208 112.246 96.208 111.786 cv
96.208 111.316 96.5879 110.936 97.058 110.936 cv
97.528 110.936 97.898 111.316 97.898 111.786 cv
97.898 112.246 97.528 112.626 97.058 112.626 cv
f
133.75 141.529 mo
130.643 141.529 127.152 140.407 123.867 138.277 cv
123.801 137.873 123.452 137.566 123.038 137.566 cv
122.976 137.566 122.915 137.572 122.857 137.585 cv
122.547 137.361 122.239 137.128 121.935 136.886 cv
137.988 136.886 li
137.988 138.396 li
141.928 136.636 li
137.988 134.886 li
137.988 136.386 li
132.628 136.386 li
132.735 136.244 132.798 136.067 132.798 135.876 cv
132.798 135.406 132.418 135.026 131.948 135.026 cv
131.478 135.026 131.098 135.406 131.098 135.876 cv
131.098 136.067 131.161 136.244 131.268 136.386 cv
121.325 136.386 li
120.774 135.919 120.234 135.422 119.708 134.896 cv
114.917 130.105 112.575 124.131 113.158 119.385 cv
114.849 119.9 116.53 120.154 118.121 120.154 cv
119.483 120.154 120.779 119.968 121.959 119.601 cv
121.913 119.704 121.888 119.817 121.888 119.936 cv
121.888 120.406 122.268 120.786 122.738 120.786 cv
123.198 120.786 123.578 120.406 123.578 119.936 cv
123.578 119.602 123.378 119.311 123.093 119.176 cv
124.689 118.467 126.003 117.378 126.878 115.924 cv
127.236 115.824 127.498 115.496 127.498 115.106 cv
127.498 114.995 127.477 114.889 127.438 114.791 cv
127.716 114.088 127.887 113.351 127.957 112.592 cv
130.876 113.671 133.833 115.551 136.438 118.156 cv
143.318 125.036 145.148 134.356 140.528 138.976 cv
138.802 140.702 136.417 141.529 133.75 141.529 cv
134.368 138.036 mo
133.898 138.036 133.518 138.416 133.518 138.876 cv
133.518 139.346 133.898 139.726 134.368 139.726 cv
134.828 139.726 135.208 139.346 135.208 138.876 cv
135.208 138.416 134.828 138.036 134.368 138.036 cv
124.648 130.506 mo
124.188 130.506 123.808 130.886 123.808 131.346 cv
123.808 131.816 124.188 132.196 124.648 132.196 cv
125.118 132.196 125.498 131.816 125.498 131.346 cv
125.498 130.886 125.118 130.506 124.648 130.506 cv
120.318 126.346 mo
119.848 126.346 119.468 126.726 119.468 127.196 cv
119.468 127.666 119.848 128.036 120.318 128.036 cv
120.788 128.036 121.168 127.666 121.168 127.196 cv
121.168 126.726 120.788 126.346 120.318 126.346 cv
136.828 125.926 mo
136.358 125.926 135.978 126.306 135.978 126.776 cv
135.978 127.246 136.358 127.626 136.828 127.626 cv
137.288 127.626 137.668 127.246 137.668 126.776 cv
137.668 126.306 137.288 125.926 136.828 125.926 cv
126.398 125.676 mo
125.938 125.676 125.558 126.056 125.558 126.526 cv
125.558 126.996 125.938 127.376 126.398 127.376 cv
126.868 127.376 127.248 126.996 127.248 126.526 cv
127.248 126.056 126.868 125.676 126.398 125.676 cv
131.818 124.676 mo
131.358 124.676 130.978 125.056 130.978 125.526 cv
130.978 125.996 131.358 126.376 131.818 126.376 cv
132.288 126.376 132.668 125.996 132.668 125.526 cv
132.668 125.056 132.288 124.676 131.818 124.676 cv
127.148 122.016 mo
126.688 122.016 126.308 122.386 126.308 122.856 cv
126.308 123.326 126.688 123.706 127.148 123.706 cv
127.618 123.706 127.998 123.326 127.998 122.856 cv
127.998 122.386 127.618 122.016 127.148 122.016 cv
135.828 119.506 mo
135.358 119.506 134.978 119.886 134.978 120.356 cv
134.978 120.826 135.358 121.206 135.828 121.206 cv
136.288 121.206 136.668 120.826 136.668 120.356 cv
136.668 119.886 136.288 119.506 135.828 119.506 cv
129.818 117.596 mo
129.348 117.596 128.978 117.976 128.978 118.436 cv
128.978 118.906 129.348 119.286 129.818 119.286 cv
130.288 119.286 130.668 118.906 130.668 118.436 cv
130.668 117.976 130.288 117.596 129.818 117.596 cv
132.908 115.676 mo
132.438 115.676 132.058 116.056 132.058 116.526 cv
132.058 116.986 132.438 117.366 132.908 117.366 cv
133.368 117.366 133.748 116.986 133.748 116.526 cv
133.748 116.056 133.368 115.676 132.908 115.676 cv
.931765 .963137 .910588 rgb
f
137.988 138.396 mo
137.988 138.396 li
137.988 136.886 li
139.298 136.886 li
139.436 136.886 139.548 136.774 139.548 136.636 cv
139.548 136.498 139.436 136.386 139.298 136.386 cv
137.988 136.386 li
137.988 134.886 li
141.928 136.636 li
137.988 138.396 li
.352941 .521569 .72549 rgb
f
139.298 136.886 mo
137.988 136.886 li
121.935 136.886 li
121.73 136.723 121.527 136.557 121.325 136.386 cv
131.268 136.386 li
131.423 136.592 131.669 136.726 131.948 136.726 cv
132.226 136.726 132.473 136.592 132.628 136.386 cv
137.988 136.386 li
139.298 136.386 li
139.436 136.386 139.548 136.498 139.548 136.636 cv
139.548 136.774 139.436 136.886 139.298 136.886 cv
f
123.867 138.277 mo
123.528 138.057 123.191 137.826 122.857 137.585 cv
122.915 137.572 122.976 137.566 123.038 137.566 cv
123.452 137.566 123.801 137.873 123.867 138.277 cv
.658823 .815686 .552941 rgb
f
131.948 136.726 mo
131.669 136.726 131.423 136.592 131.268 136.386 cv
131.268 136.386 li
131.161 136.244 131.098 136.067 131.098 135.876 cv
131.098 135.406 131.478 135.026 131.948 135.026 cv
132.418 135.026 132.798 135.406 132.798 135.876 cv
132.798 136.067 132.735 136.244 132.628 136.386 cv
132.628 136.386 li
132.473 136.592 132.226 136.726 131.948 136.726 cv
f
122.738 120.786 mo
122.268 120.786 121.888 120.406 121.888 119.936 cv
121.888 119.817 121.913 119.704 121.959 119.601 cv
122.35 119.479 122.729 119.337 123.093 119.176 cv
123.378 119.311 123.578 119.602 123.578 119.936 cv
123.578 120.406 123.198 120.786 122.738 120.786 cv
f
134.368 139.726 mo
133.898 139.726 133.518 139.346 133.518 138.876 cv
133.518 138.416 133.898 138.036 134.368 138.036 cv
134.828 138.036 135.208 138.416 135.208 138.876 cv
135.208 139.346 134.828 139.726 134.368 139.726 cv
f
120.318 128.036 mo
119.848 128.036 119.468 127.666 119.468 127.196 cv
119.468 126.726 119.848 126.346 120.318 126.346 cv
120.788 126.346 121.168 126.726 121.168 127.196 cv
121.168 127.666 120.788 128.036 120.318 128.036 cv
f
124.648 132.196 mo
124.188 132.196 123.808 131.816 123.808 131.346 cv
123.808 130.886 124.188 130.506 124.648 130.506 cv
125.118 130.506 125.498 130.886 125.498 131.346 cv
125.498 131.816 125.118 132.196 124.648 132.196 cv
f
127.148 123.706 mo
126.688 123.706 126.308 123.326 126.308 122.856 cv
126.308 122.386 126.688 122.016 127.148 122.016 cv
127.618 122.016 127.998 122.386 127.998 122.856 cv
127.998 123.326 127.618 123.706 127.148 123.706 cv
f
126.878 115.924 mo
126.902 115.885 126.925 115.846 126.948 115.806 cv
127.138 115.477 127.301 115.139 127.438 114.791 cv
127.477 114.889 127.498 114.995 127.498 115.106 cv
127.498 115.496 127.236 115.824 126.878 115.924 cv
f
129.818 119.286 mo
129.348 119.286 128.978 118.906 128.978 118.436 cv
128.978 117.976 129.348 117.596 129.818 117.596 cv
130.288 117.596 130.668 117.976 130.668 118.436 cv
130.668 118.906 130.288 119.286 129.818 119.286 cv
f
131.818 126.376 mo
131.358 126.376 130.978 125.996 130.978 125.526 cv
130.978 125.056 131.358 124.676 131.818 124.676 cv
132.288 124.676 132.668 125.056 132.668 125.526 cv
132.668 125.996 132.288 126.376 131.818 126.376 cv
f
126.398 127.376 mo
125.938 127.376 125.558 126.996 125.558 126.526 cv
125.558 126.056 125.938 125.676 126.398 125.676 cv
126.868 125.676 127.248 126.056 127.248 126.526 cv
127.248 126.996 126.868 127.376 126.398 127.376 cv
f
136.828 127.626 mo
136.358 127.626 135.978 127.246 135.978 126.776 cv
135.978 126.306 136.358 125.926 136.828 125.926 cv
137.288 125.926 137.668 126.306 137.668 126.776 cv
137.668 127.246 137.288 127.626 136.828 127.626 cv
f
132.908 117.366 mo
132.438 117.366 132.058 116.986 132.058 116.526 cv
132.058 116.056 132.438 115.676 132.908 115.676 cv
133.368 115.676 133.748 116.056 133.748 116.526 cv
133.748 116.986 133.368 117.366 132.908 117.366 cv
f
135.828 121.206 mo
135.358 121.206 134.978 120.826 134.978 120.356 cv
134.978 119.886 135.358 119.506 135.828 119.506 cv
136.288 119.506 136.668 119.886 136.668 120.356 cv
136.668 120.826 136.288 121.206 135.828 121.206 cv
f
113.158 119.385 mo
112.909 119.309 112.659 119.228 112.41 119.14 cv
113.022 114.952 111.862 111.123 108.948 109.086 cv
107.563 108.115 105.935 107.655 104.207 107.655 cv
103.147 107.655 102.05 107.828 100.95 108.162 cv
100.197 105.686 100.329 103.211 101.528 101.136 cv
103.18 98.2708 106.5 96.7844 110.349 96.7844 cv
113.093 96.7844 116.105 97.5395 118.975 99.0892 cv
118.949 99.0869 118.924 99.0858 118.898 99.0858 cv
118.428 99.0858 118.048 99.4658 118.048 99.9258 cv
118.048 100.396 118.428 100.776 118.898 100.776 cv
119.368 100.776 119.748 100.396 119.748 99.9258 cv
119.748 99.742 119.687 99.5709 119.584 99.4317 cv
119.908 99.621 120.225 99.8173 120.532 100.02 cv
120.491 100.12 120.468 100.23 120.468 100.346 cv
120.468 100.816 120.848 101.196 121.318 101.196 cv
121.532 101.196 121.728 101.117 121.877 100.987 cv
126.021 104.233 128.316 108.696 127.957 112.592 cv
126.051 111.888 124.162 111.525 122.396 111.525 cv
119.733 111.525 117.353 112.351 115.628 114.076 cv
114.222 115.479 113.412 117.315 113.158 119.385 cv
116.898 108.336 mo
116.428 108.336 116.048 108.716 116.048 109.186 cv
116.048 109.656 116.428 110.036 116.898 110.036 cv
117.368 110.036 117.748 109.656 117.748 109.186 cv
117.748 108.716 117.368 108.336 116.898 108.336 cv
113.728 104.086 mo
113.258 104.086 112.878 104.466 112.878 104.936 cv
112.878 105.406 113.258 105.776 113.728 105.776 cv
114.198 105.776 114.578 105.406 114.578 104.936 cv
114.578 104.466 114.198 104.086 113.728 104.086 cv
123.318 103.916 mo
122.848 103.916 122.468 104.296 122.468 104.766 cv
122.468 105.236 122.848 105.616 123.318 105.616 cv
123.788 105.616 124.168 105.236 124.168 104.766 cv
124.168 104.296 123.788 103.916 123.318 103.916 cv
105.388 103.916 mo
104.928 103.916 104.548 104.296 104.548 104.766 cv
104.548 105.236 104.928 105.616 105.388 105.616 cv
105.858 105.616 106.238 105.236 106.238 104.766 cv
106.238 104.296 105.858 103.916 105.388 103.916 cv
118.648 102.416 mo
118.178 102.416 117.798 102.796 117.798 103.266 cv
117.798 103.736 118.178 104.116 118.648 104.116 cv
119.118 104.116 119.498 103.736 119.498 103.266 cv
119.498 102.796 119.118 102.416 118.648 102.416 cv
112.148 100.336 mo
111.678 100.336 111.298 100.716 111.298 101.186 cv
111.298 101.646 111.678 102.026 112.148 102.026 cv
112.618 102.026 112.988 101.646 112.988 101.186 cv
112.988 100.716 112.618 100.336 112.148 100.336 cv
.922353 .952941 .979608 rgb
f
105.388 105.616 mo
104.928 105.616 104.548 105.236 104.548 104.766 cv
104.548 104.296 104.928 103.916 105.388 103.916 cv
105.858 103.916 106.238 104.296 106.238 104.766 cv
106.238 105.236 105.858 105.616 105.388 105.616 cv
.611765 .764706 .898039 rgb
f
116.898 110.036 mo
116.428 110.036 116.048 109.656 116.048 109.186 cv
116.048 108.716 116.428 108.336 116.898 108.336 cv
117.368 108.336 117.748 108.716 117.748 109.186 cv
117.748 109.656 117.368 110.036 116.898 110.036 cv
f
112.148 102.026 mo
111.678 102.026 111.298 101.646 111.298 101.186 cv
111.298 100.716 111.678 100.336 112.148 100.336 cv
112.618 100.336 112.988 100.716 112.988 101.186 cv
112.988 101.646 112.618 102.026 112.148 102.026 cv
f
113.728 105.776 mo
113.258 105.776 112.878 105.406 112.878 104.936 cv
112.878 104.466 113.258 104.086 113.728 104.086 cv
114.198 104.086 114.578 104.466 114.578 104.936 cv
114.578 105.406 114.198 105.776 113.728 105.776 cv
f
118.898 100.776 mo
118.428 100.776 118.048 100.396 118.048 99.9258 cv
118.048 99.4658 118.428 99.0858 118.898 99.0858 cv
118.924 99.0858 118.949 99.0869 118.975 99.0892 cv
119.146 99.1819 119.317 99.2774 119.488 99.3758 cv
119.52 99.3943 119.552 99.4131 119.584 99.4317 cv
119.687 99.5709 119.748 99.742 119.748 99.9258 cv
119.748 100.396 119.368 100.776 118.898 100.776 cv
f
118.648 104.116 mo
118.178 104.116 117.798 103.736 117.798 103.266 cv
117.798 102.796 118.178 102.416 118.648 102.416 cv
119.118 102.416 119.498 102.796 119.498 103.266 cv
119.498 103.736 119.118 104.116 118.648 104.116 cv
f
121.318 101.196 mo
120.848 101.196 120.468 100.816 120.468 100.346 cv
120.468 100.23 120.491 100.12 120.532 100.02 cv
121 100.328 121.448 100.651 121.877 100.987 cv
121.728 101.117 121.532 101.196 121.318 101.196 cv
f
123.318 105.616 mo
122.848 105.616 122.468 105.236 122.468 104.766 cv
122.468 104.296 122.848 103.916 123.318 103.916 cv
123.788 103.916 124.168 104.296 124.168 104.766 cv
124.168 105.236 123.788 105.616 123.318 105.616 cv
f
112.41 119.14 mo
111.26 118.738 110.111 118.214 108.988 117.566 cv
104.87 115.19 102.018 111.675 100.95 108.162 cv
102.05 107.828 103.147 107.655 104.207 107.655 cv
105.935 107.655 107.563 108.115 108.948 109.086 cv
111.862 111.123 113.022 114.952 112.41 119.14 cv
108.308 112.176 mo
107.838 112.176 107.468 112.556 107.468 113.016 cv
107.468 113.486 107.838 113.866 108.308 113.866 cv
108.778 113.866 109.158 113.486 109.158 113.016 cv
109.158 112.556 108.778 112.176 108.308 112.176 cv
.91511 .903791 .900961 rgb
f
108.308 113.866 mo
107.838 113.866 107.468 113.486 107.468 113.016 cv
107.468 112.556 107.838 112.176 108.308 112.176 cv
108.778 112.176 109.158 112.556 109.158 113.016 cv
109.158 113.486 108.778 113.866 108.308 113.866 cv
.886274 .709804 .592157 rgb
f
118.121 120.154 mo
116.53 120.154 114.849 119.9 113.158 119.385 cv
113.412 117.315 114.222 115.479 115.628 114.076 cv
117.353 112.351 119.733 111.525 122.396 111.525 cv
124.162 111.525 126.051 111.888 127.957 112.592 cv
127.887 113.351 127.716 114.088 127.438 114.791 cv
127.313 114.477 127.007 114.256 126.648 114.256 cv
126.188 114.256 125.808 114.636 125.808 115.106 cv
125.808 115.576 126.188 115.956 126.648 115.956 cv
126.728 115.956 126.805 115.945 126.878 115.924 cv
126.003 117.378 124.689 118.467 123.093 119.176 cv
122.985 119.125 122.864 119.096 122.738 119.096 cv
122.389 119.096 122.09 119.305 121.959 119.601 cv
120.779 119.968 119.483 120.154 118.121 120.154 cv
120.318 116.096 mo
119.848 116.096 119.468 116.466 119.468 116.936 cv
119.468 117.406 119.848 117.786 120.318 117.786 cv
120.788 117.786 121.168 117.406 121.168 116.936 cv
121.168 116.466 120.788 116.096 120.318 116.096 cv
.867005 .923599 .908035 rgb
f
120.318 117.786 mo
119.848 117.786 119.468 117.406 119.468 116.936 cv
119.468 116.466 119.848 116.096 120.318 116.096 cv
120.788 116.096 121.168 116.466 121.168 116.936 cv
121.168 117.406 120.788 117.786 120.318 117.786 cv
.65098 .803922 .623529 rgb
f
121.959 119.601 mo
122.09 119.305 122.389 119.096 122.738 119.096 cv
122.864 119.096 122.985 119.125 123.093 119.176 cv
122.729 119.337 122.35 119.479 121.959 119.601 cv
f
126.648 115.956 mo
126.188 115.956 125.808 115.576 125.808 115.106 cv
125.808 114.636 126.188 114.256 126.648 114.256 cv
127.007 114.256 127.313 114.477 127.438 114.791 cv
127.301 115.139 127.138 115.477 126.948 115.806 cv
126.925 115.846 126.902 115.885 126.878 115.924 cv
126.805 115.945 126.728 115.956 126.648 115.956 cv
f
193.768 95.2558 mo
191.918 91.6058 li
190.078 95.2558 li
193.768 95.2558 li
cp
.275 .447 .769 rgb
ef
1 lc
1 lj
10 ml
191.918 94.0458 mo
191.918 141.206 li
@
193.768 95.2558 mo
191.918 91.6058 li
190.078 95.2558 li
193.768 95.2558 li
cp
ef
191.918 94.0458 mo
191.918 141.206 li
@
235.198 139.756 mo
238.888 137.926 li
235.198 136.096 li
235.198 139.756 li
cp
ef
236.428 137.926 mo
188.858 137.926 li
@
235.198 139.756 mo
238.888 137.926 li
235.198 136.096 li
235.198 139.756 li
cp
ef
236.428 137.926 mo
188.858 137.926 li
@
193.768 95.2558 mo
191.918 91.6058 li
190.078 95.2558 li
193.768 95.2558 li
cp
ef
191.918 94.0458 mo
191.918 141.206 li
@
235.198 139.756 mo
238.888 137.926 li
235.198 136.096 li
235.198 139.756 li
cp
ef
236.428 137.926 mo
188.858 137.926 li
@
191.658 126.016 mo
192.128 126.016 192.508 126.396 192.508 126.856 cv
192.508 127.326 192.128 127.706 191.658 127.706 cv
191.188 127.706 190.818 127.326 190.818 126.856 cv
190.818 126.396 191.188 126.016 191.658 126.016 cv
cp
.957 .694 .514 rgb
ef
191.908 118.756 mo
192.378 118.756 192.758 119.136 192.758 119.606 cv
192.758 120.076 192.378 120.456 191.908 120.456 cv
191.438 120.456 191.068 120.076 191.068 119.606 cv
191.068 119.136 191.438 118.756 191.908 118.756 cv
cp
ef
197.918 122.676 mo
198.378 122.676 198.758 123.056 198.758 123.526 cv
198.758 123.996 198.378 124.376 197.918 124.376 cv
197.448 124.376 197.068 123.996 197.068 123.526 cv
197.068 123.056 197.448 122.676 197.918 122.676 cv
cp
ef
199.498 129.096 mo
199.968 129.096 200.348 129.476 200.348 129.946 cv
200.348 130.416 199.968 130.796 199.498 130.796 cv
199.028 130.796 198.648 130.416 198.648 129.946 cv
198.648 129.476 199.028 129.096 199.498 129.096 cv
cp
ef
199.578 115.006 mo
200.048 115.006 200.428 115.386 200.428 115.856 cv
200.428 116.326 200.048 116.706 199.578 116.706 cv
199.118 116.706 198.738 116.326 198.738 115.856 cv
198.738 115.386 199.118 115.006 199.578 115.006 cv
cp
ef
202.328 124.266 mo
202.798 124.266 203.178 124.646 203.178 125.106 cv
203.178 125.576 202.798 125.956 202.328 125.956 cv
201.868 125.956 201.488 125.576 201.488 125.106 cv
201.488 124.646 201.868 124.266 202.328 124.266 cv
cp
ef
201.828 118.006 mo
202.298 118.006 202.678 118.386 202.678 118.856 cv
202.678 119.326 202.298 119.706 201.828 119.706 cv
201.368 119.706 200.988 119.326 200.988 118.856 cv
200.988 118.386 201.368 118.006 201.828 118.006 cv
cp
ef
195.408 110.936 mo
195.878 110.936 196.258 111.316 196.258 111.786 cv
196.258 112.246 195.878 112.626 195.408 112.626 cv
194.948 112.626 194.568 112.246 194.568 111.786 cv
194.568 111.316 194.948 110.936 195.408 110.936 cv
cp
ef
203.748 103.916 mo
204.218 103.916 204.598 104.296 204.598 104.766 cv
204.598 105.236 204.218 105.616 203.748 105.616 cv
203.278 105.616 202.898 105.236 202.898 104.766 cv
202.898 104.296 203.278 103.916 203.748 103.916 cv
cp
.612 .765 .898 rgb
ef
206.668 112.176 mo
207.138 112.176 207.518 112.556 207.518 113.016 cv
207.518 113.486 207.138 113.866 206.668 113.866 cv
206.198 113.866 205.818 113.486 205.818 113.016 cv
205.818 112.556 206.198 112.176 206.668 112.176 cv
cp
.957 .694 .514 rgb
ef
215.258 108.336 mo
215.718 108.336 216.098 108.716 216.098 109.186 cv
216.098 109.656 215.718 110.036 215.258 110.036 cv
214.788 110.036 214.408 109.656 214.408 109.186 cv
214.408 108.716 214.788 108.336 215.258 108.336 cv
cp
.612 .765 .898 rgb
ef
210.498 100.336 mo
210.968 100.336 211.348 100.716 211.348 101.186 cv
211.348 101.646 210.968 102.026 210.498 102.026 cv
210.038 102.026 209.658 101.646 209.658 101.186 cv
209.658 100.716 210.038 100.336 210.498 100.336 cv
cp
ef
218.678 116.096 mo
219.138 116.096 219.518 116.466 219.518 116.936 cv
219.518 117.406 219.138 117.786 218.678 117.786 cv
218.208 117.786 217.828 117.406 217.828 116.936 cv
217.828 116.466 218.208 116.096 218.678 116.096 cv
cp
.659 .816 .553 rgb
ef
221.088 119.096 mo
221.558 119.096 221.938 119.476 221.938 119.936 cv
221.938 120.406 221.558 120.786 221.088 120.786 cv
220.628 120.786 220.248 120.406 220.248 119.936 cv
220.248 119.476 220.628 119.096 221.088 119.096 cv
cp
ef
218.678 126.346 mo
219.138 126.346 219.518 126.726 219.518 127.196 cv
219.518 127.666 219.138 128.036 218.678 128.036 cv
218.208 128.036 217.828 127.666 217.828 127.196 cv
217.828 126.726 218.208 126.346 218.678 126.346 cv
cp
ef
223.008 130.506 mo
223.478 130.506 223.858 130.886 223.858 131.346 cv
223.858 131.816 223.478 132.196 223.008 132.196 cv
222.538 132.196 222.158 131.816 222.158 131.346 cv
222.158 130.886 222.538 130.506 223.008 130.506 cv
cp
ef
225.508 122.016 mo
225.978 122.016 226.358 122.386 226.358 122.856 cv
226.358 123.326 225.978 123.706 225.508 123.706 cv
225.038 123.706 224.658 123.326 224.658 122.856 cv
224.658 122.386 225.038 122.016 225.508 122.016 cv
cp
ef
225.008 114.256 mo
225.478 114.256 225.858 114.636 225.858 115.106 cv
225.858 115.576 225.478 115.956 225.008 115.956 cv
224.538 115.956 224.158 115.576 224.158 115.106 cv
224.158 114.636 224.538 114.256 225.008 114.256 cv
cp
ef
228.178 117.596 mo
228.648 117.596 229.028 117.976 229.028 118.436 cv
229.028 118.906 228.648 119.286 228.178 119.286 cv
227.708 119.286 227.328 118.906 227.328 118.436 cv
227.328 117.976 227.708 117.596 228.178 117.596 cv
cp
ef
230.178 124.676 mo
230.648 124.676 231.028 125.056 231.028 125.526 cv
231.028 125.996 230.648 126.376 230.178 126.376 cv
229.708 126.376 229.328 125.996 229.328 125.526 cv
229.328 125.056 229.708 124.676 230.178 124.676 cv
cp
ef
224.758 125.676 mo
225.228 125.676 225.608 126.056 225.608 126.526 cv
225.608 126.996 225.228 127.376 224.758 127.376 cv
224.288 127.376 223.908 126.996 223.908 126.526 cv
223.908 126.056 224.288 125.676 224.758 125.676 cv
cp
ef
235.178 125.926 mo
235.648 125.926 236.028 126.306 236.028 126.776 cv
236.028 127.246 235.648 127.626 235.178 127.626 cv
234.708 127.626 234.338 127.246 234.338 126.776 cv
234.338 126.306 234.708 125.926 235.178 125.926 cv
cp
ef
212.088 104.086 mo
212.558 104.086 212.938 104.466 212.938 104.936 cv
212.938 105.406 212.558 105.776 212.088 105.776 cv
211.618 105.776 211.238 105.406 211.238 104.936 cv
211.238 104.466 211.618 104.086 212.088 104.086 cv
cp
.612 .765 .898 rgb
ef
217.258 99.0858 mo
217.728 99.0858 218.098 99.4658 218.098 99.9258 cv
218.098 100.396 217.728 100.776 217.258 100.776 cv
216.788 100.776 216.408 100.396 216.408 99.9258 cv
216.408 99.4658 216.788 99.0858 217.258 99.0858 cv
cp
ef
204.248 94.6658 mo
204.718 94.6658 205.098 95.0458 205.098 95.5158 cv
205.098 95.9758 204.718 96.3558 204.248 96.3558 cv
203.778 96.3558 203.398 95.9758 203.398 95.5158 cv
203.398 95.0458 203.778 94.6658 204.248 94.6658 cv
cp
ef
217.008 102.416 mo
217.478 102.416 217.848 102.796 217.848 103.266 cv
217.848 103.736 217.478 104.116 217.008 104.116 cv
216.538 104.116 216.158 103.736 216.158 103.266 cv
216.158 102.796 216.538 102.416 217.008 102.416 cv
cp
ef
231.258 115.676 mo
231.728 115.676 232.108 116.056 232.108 116.526 cv
232.108 116.986 231.728 117.366 231.258 117.366 cv
230.798 117.366 230.418 116.986 230.418 116.526 cv
230.418 116.056 230.798 115.676 231.258 115.676 cv
cp
.659 .816 .553 rgb
ef
234.178 119.506 mo
234.648 119.506 235.028 119.886 235.028 120.356 cv
235.028 120.826 234.648 121.206 234.178 121.206 cv
233.708 121.206 233.338 120.826 233.338 120.356 cv
233.338 119.886 233.708 119.506 234.178 119.506 cv
cp
ef
211.168 93.3358 mo
211.638 93.3358 212.018 93.7058 212.018 94.1758 cv
212.018 94.6458 211.638 95.0258 211.168 95.0258 cv
210.698 95.0258 210.318 94.6458 210.318 94.1758 cv
210.318 93.7058 210.698 93.3358 211.168 93.3358 cv
cp
.612 .765 .898 rgb
ef
215.918 94.2458 mo
216.388 94.2458 216.768 94.6258 216.768 95.0958 cv
216.768 95.5658 216.388 95.9458 215.918 95.9458 cv
215.458 95.9458 215.078 95.5658 215.078 95.0958 cv
215.078 94.6258 215.458 94.2458 215.918 94.2458 cv
cp
ef
219.678 99.4958 mo
220.138 99.4958 220.518 99.8758 220.518 100.346 cv
220.518 100.816 220.138 101.196 219.678 101.196 cv
219.208 101.196 218.828 100.816 218.828 100.346 cv
218.828 99.8758 219.208 99.4958 219.678 99.4958 cv
cp
ef
221.678 103.916 mo
222.138 103.916 222.518 104.296 222.518 104.766 cv
222.518 105.236 222.138 105.616 221.678 105.616 cv
221.208 105.616 220.828 105.236 220.828 104.766 cv
220.828 104.296 221.208 103.916 221.678 103.916 cv
cp
ef
193.768 95.2558 mo
196.228 99.0558 195.628 106.316 199.958 108.126 cv
202.508 109.196 206.768 108.376 209.558 109.636 cv
212.718 111.066 213.988 115.176 213.308 118.206 cv
212.568 121.506 209.508 123.516 207.158 125.826 cv
204.558 128.386 202.828 131.326 201.818 135.026 cv
0 gry
@
212.788 114.426 mo
216.208 113.296 220.858 114.346 224.218 113.206 cv
229.048 111.556 231.168 105.356 237.538 106.686 cv
@
195.938 13.6658 mo
195.938 16.7358 li
1.24998 16.7358 li
1.24998 114.666 li
22.862 114.666 li
.275 .447 .769 rgb
@
22.232 112.146 mo
27.272 114.666 li
22.232 117.186 li
22.232 112.146 li
cp
ef
[3.5 2.5 ] 0 dsh
152.998 90.4658 mo
10.265 90.4658 li
@
174.328 90.4658 mo
249.448 90.4658 li
@
0 gry
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2022 Adobe System Incorporated. All rights reserved.
systemdict begin
DTRRBT+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/space <1C60D8A8C9B8707C25> |-
/hyphen <1C60D8A8C9B81F2C797FA61189B8881D0DB497EEC4F8> |-
/C <1C60D8A8C9B64EDFFBA6F0CF8A2CDA79A069460245F5373797A9E71DEA34
5031885496623E7C65FDB470FC6BFF7BE37B20FF363C43CAB08BA8E918FCBA9D
EB0021B12355971EB2945D0594E78D2EE4D593C49790304E106026BC94209715
8DDBF12F8B83C9752B02212C28957008FA70A685356583CB4C7D6F55B12AC739
9ECFE4B69C91B472A6132E65C9F7B697AE783582C9D65C392064A7C49C83B283
409DD22AD16B7DD28B54D5FC454C> |-
/E <1C60D8A8C9B7D8BE19945133FE501067A24BBF08B984801DD42E090C7BFC
A94BE6C4AA953A8A674F2ED3DEE261A8700CA873A3A1D3699D8129F8FA28DE52
C44FD8214EA37190B26E64C97677BF6E1856F59EF49286A31D4133D861C74CDB
92794376B13E311920B8F547FC8F105147550894C833300FA326DF7877402F2A
3FD3184C9B8E130B79DB62E2735C65FD4E7A86140D8A7D764E8F05488CC19495
58757A62743714E5384E2EF166B32CB849712A9C93B7CF04FCFE8063494A215F
A79B98816AEC20BC3F> |-
/I <1C60D8A8C9B81F2C3A0A02564E7D4C279888DF3754179E93227DE304C0C9
64F0884ECCD4584153E47F1EA31388FE202C61849A093340FE4B9D53774AFF48
A8CAE2304CA5B92609AD38240AA6AEAF6E8AB66763220047F647E30DE8B74D2A
7DF15DDA4EFCA27B915E1B9ED43E7C12> |-
/K <1C60D8A8C9B6079F6DAD6439E719A5649ADA7D8B9E734C715565956F15B5
C4CFBB8891AD82AF5B965DC9DBF0762D43C17265BBD3CD422561D8093800D47C
30E7401B7FF953462B20D5841B49861E5477C9C06DC8DEA98C62C73A16DCD10A
99A3BB2728EF5C45B4F29723E3FD20A045034CDC5B2823010371DE4EA42A5365
F63BDAAE6E06349967F6DD5B6C651FF133F1AC111407BA069118B1E1EF88ECE8
67D30D2AC6A5EEB5F5B14A4020A8D1688A963E3E2FF5DFE6441AA27FDF0183EE
620579E7103491C7EBC49E5703B87C43F0A841871BC2D6A7D289877EB3748B6B
80FD93562885CC9F2182E80755BBCE3303DAD528BFBDFEB3202E48EDCFB93BC1> |-
/L <1C60D8A8C9B7D8BE1910D0EBEC744B6638E6ED4C6FC0AF39F5B8B10BFA09
270956A997B577BBD8E3EC179B174ED931484CCFFCF819D4978AE37145A7A3C2
21DF78A5AAD08DFCBE2638BCFCF6B4930FFFAD1163890B85697ECB905727AF12
A0E5C1679B01834AD8D0C4111313E17E548887938F4F64DA1DB39BD7CD68748B
847D2C24AD687E0CDB56> |-
/M <1C60D8A8C9B59F85E8A8526E50FEB33438675EDBBD0866093A4555E3EA3A
35849B91EFFB88205281CC77395AC14DF328B50F1F179210F0307F50BFB242AA
7F76F18203303EF0BF46B76E61FB539D568EF9F434EC657F4C5CDE1BCAA90A83
BAFEB02869664DC06CC8CA4FA1E876C39F3F5371AD261F117CDAF8F6A4E96ECA
4F5088752E105CDEB8FBEB2F7F82D31A2FEB6DF3C053295A006D723DEE7CEF30
A9F16E8C6EE80DDA09053247> |-
/S <1C60D8A8C9B7EF32243DA21D5631D8766D74D715030BA7905332A0CFAC49
387DB487F69FE973B04989A1F5B84226AC0574A3AC8A92A20A67AC6A93CF1F8D
7D050DEAAE8CF31B4A5FB504F0A0814E8C9022E7C7EFFB00070B62EB780F5BFD
7AC1407620155D4B738E953EA9E8519FCB3635DEED6C82D9AB968BE1131CEEB6
B072A246B745E2E47F0890CD4A4DD5061C30741173A5782D0F5AE0E645337518
CA765AC1ABF9ABB13F9D6F8666630C08F558B2481DB7C0FEA08930FF35DE9049
07DBC222EF06C7863FAB3917A57116C566327E1977A70091D7628A2440BE3AB4
44BD01341C54F829742469A9B1CF3048C0B204E355F432B93B12EA12C84F80CE
13D22435E5FCC1B5A000DE> |-
/T <1C60D8A8C9B7D8BE514ED6977CE9F9E5860FEBB6D8EBF5879FDED6C1E48F
6AFEEE7B65DB6C9D492058CAA103CB13A7A80B0015E85F272BB9775991CD9755
6EC3CFB46A4E1606F006216EABEB711074247C72C159202F32CC7F5F403FAE58
110685510DDB32C57700D5067C975D7063A496FE85C1E5> |-
/a <1C60D8A8C9B77FE2CEA139CB15A16492F485162FE605BA10F460B6DC550D
EC7BA0BCA1B89C8429260417FE96BA758C22F6762386C9F1CAF53456C89D4C6B
177AA810FBB608A57F053C4DA17FD8A122DD63CD2EE0563B0FFA48FEF5CBDB33
3E4EF010579993E238020BE59CA5D3F31F329BD506C436A3A2AAAB6CBD385FDB
0E5188BC3D34A31214C941C253FAF1F818F84A3F73340CA7F3B7A85C87022E70
BF3FF56918287082AAA1D7B6CDE998BE3D8663592D3F0DEFC69D87A351A29895
DE83B0D7478C3C01D85F944C563EFCF85986470E4B8EDEEDC025A0FB3217B737
B99EB7B6E2243F66B907475D1C465D1D07EDFEFC5123FE5A4D48A8B15BE3272E
F1EF1464C3F0D45D7CBB8749AF571E09> |-
/b <1C60D8A8C9B7A73DB90B311171EB67EB8746E2EC8FC994CCA7A632F7C7E8
F4A5D28D725796F2BC8526696060F460C892CC5686CD97F757C6EFB11E42DD9A
F110BE11F49DAEFA324F62E3046D4E2410C0923EDB87332B0381414594D39992
4398EF0A71772EF0EFEA72F5940C288418E4FCC7A2DE1E6A1AEA513FBDA0D660
3C38C9676D3489A418D7163D5E50FB679144E02901D98844D885CA3AAF379A83
F23AED1F56FC130F21> |-
/c <1C60D8A8C9B77FE2C180CE42B4078449B9D767742AB4CF5971DFD438ECC5
4400989182964B065BACA704BA363536AC987FC433F59A23A3DC16CBD969F42A
6041BB8327C43B9105FC5DF44A0437E9E26FE545542A602D007FC6A926264F9C
2999730E7919239B324086FEA852156F456647AA0692084759C352D699897179
9F4BEF3EFB7DE91C98C83C567200278FF2145E16D28EDE7556C59DB204> |-
/d <1C60D8A8C9B7A73DB9CAB5EAE520FF5085D357A7F1B1CBAAAB9D3C3D2030
65B58561B55699E1F852D974E24DCDB3FAC1151DF1DB63800C3FA779DDD3329A
86B4E9458DA578ECA7DC82AB1CB5558FB398EDD8AF237A44BB61AD8FF07FB857
EAFB03E3B7223E134D0A703B89A6CB54355CD1F1518C86E0EAFDD151579F5CCB
01DCDB1BD56096AB78D2E9ADD609F7B156D422E9074A62B38BF35F82A0AAD104
E0C2CB94DA5F3F39F8DB246ADB5F008F682AF80FAED0C691E7A618879362783A
36815EA1CE5876FAC4F83CDFE1BD4A> |-
/e <1C60D8A8C9B77FE2C19119FE019B929F076F8319E8913467AECA41BE2BEA
D3EC175346E3F888D3AD76D215AD69034A954DFD661ECBEA3B145468480B6A15
F5C865D2083DC0B04744AA76DE4CC9E0C9DBDCC2C59DAA00F28A6A47092C7FFA
0397DC47C5CBBA69AD805D3DD20D56411E92B0DE9E3F19C2FDEE1FA501318984
A59E1CFFFD06EA629758085868D3F5F7204292> |-
/f <1C60D8A8C9B81F2C3A6EB915F5DDF05E4CD39F13547A7EF54F9D79FF3209
2BEC553783B472AF53E99B3070692992C4C512F2D79447B5EC673AA5FA8274BF
E5BA294793E06A2CD85C961166E35F08CE852DFFE5F2678D2E0B1687083D40FC
628A3BE0EDFC936C866DE25768CCC0F39E7FAD6F5686BB7C64B79625F56C5573
F9A5214AA079CAA28A8468CCF29829FD2A747DD586D41C21A37BF93A8AC8FDD9
41D5FFB6450DF53658C2420EB0E5E88807E727AED5F7> |-
/g <1C60D8A8C9B7A73DAC44F2C448ECAF253E44055AA4AFC4D4E618BBF7F608
47F4AD57852D125F52503D138EEBB5C35DB7E6FF089D85EF3D59177D6853B7FF
4DCA48A2C6450DAF6AE7485D918680B6246955433B7E96C0D52B86F6985D93AE
A8FD99F7CE5A6EDF9F82F3DCD54C24AC7F5725E8D752728B16161496E9D02EA7
07BCC03E7CE1BDA2E3632B4A11707F59DF2FD8556EC51A6594DBA10EC63EB7A8
585255CC0C8C8B32CD6316A41829AE725CE606F4A4FD4DA668556D79F4AC25BF
9E697A5DB9F54B573E1EAA6D791100EAD10708C7E706E8CBDD596589510D4EA4
5E3CA12E8144CF2A4E025D5293F77BF25BA77276DF7C97999133B17612ABFFD7
0E77479B9C8ABBB3A51D3A6F6F66CA99610B1A23618D13E1A07B26D29ACFC819
1E5B2829F3C990A5C474E53FC8B282F11A7FFA86D56BD2349AEC811B22D30027
81921B9EDDEAA1B62C5F206266BA751F865F9A5F5AF517BC35F6F732012015D0
BB42652388A219FCF002C2C0335D2D190C0C425C4FA28367480051E56A90DD46
F1C707> |-
/h <1C60D8A8C9B7A73DB904DA2C7A38531EB5E07DB80E9375E00037710435E0
27FD1F7B471BB2C47AEA703B8CB5C9C005CAA0B77F572194961F7C30413194A0
134D3FF9BA81F629AD195D96BD3C1285904670FEB33C334E260F33EE9AB1A2D9
C0C66E38CE4D3CA583879DAF16CE988CC2A14E39FED6599F4B0F3F8F061B585E
2410824AE8C179E66BD3AD9F6E34CD8CBF79298E3E4553D0E9DCA292805DED8E
36C58209B17E38B2DFAFEB881CA5FB9EC7A76A0CF0C4BFE83CE749EBD15B15E9
7FBEA4E90F2186A54E69C28F4083AB76DBE019E4C57B27760FED872C4483796F
735A795EACD82F245D81FB43B5> |-
/i <1C60D8A8C9B854D0F4318DEB2BF4A8C14C2FAB601E0ED2FF31B9BA2C4F4D
9D824A65F9E753CDA6D59F3AE6B969EC176D4AA1F064BFADF6F4B6A5454B78F9
8C4B41AC403B87C0044C2A2776BF32D7D2C5370D6DB44827DB4719A169BBE365
B0C0BED49A30732BB5E35B7101E488713F0203C9161D1F92C48C80A640085090
E2C5D79817DC05EB1FC5E4D24EE71772E51241DF9FD4D574115CFC53427DCBCB
8CA3E9F85837FAC6> |-
/l <1C60D8A8C9B854D0F40B290C0C99C039EA88FDD293C1FEAB15D2F6B8C430
4B80428A9C9B5571B0EE47CC29A6D67DEE51ABBBE57F6DDF0C02037EE8B6828D
244FB880634A92D947174D08130E6E2CF978B5067AA82A4CABC55E600FCE5527
D6441CE02F5A28D63A618F> |-
/m <1C60D8A8C9B6FF86F5D75501F5946D14C10E01941D6F8F408CE11167932D
24264D7EFCAC2AE86125FDD757A8758D869BC4213413CCB2A6A255440BA1816E
9DC45844CC319542821B45F7B81EE7391A0EDD08008613940B7EF538F41747A2
556BE4D609FA0E86A3720064373B35B3C09F29E00670FDA88D75DD91439C68FD
574D15688B76675600DF49F10BE44872E462D2FA9EDC453EEFA6E997D8F24910
7C6F71C5B180EF91CFB08123DB5F12D5248BB769BCDBF86D09B3C1EE1D61D18C
E6632A82186FF826CE8FF5C9F24094455D2446DAB1258D7CEF6AB64018AE9556
17323D2765A0C9FC9EE9EFC157214A4EF1A088A6CBE09BD12BF0618C85527D98
7ABAA0F84BBDB3F467CD6D1AFC5F01D6CD6E91196626F968CD9EC222C872FAFE
C679ED97966B06F7D45253DA82AACAAC774A43132A3F4B4FB40FD07B5AFDAE82
B335C3B8E42DF7C6FCB1E78E5819FAE1E5B06EBADF2F71F0A59372AEE76B5179
96> |-
/n <1C60D8A8C9B7A73DB913C38909CDA29FD53BC2807766C389AFB9ED86F7BC
81642DEC755C464ECEF36210D9B2C516FEA8C1248DF87B00C42E8B7B13BCCD9D
4DADECDD469C646397E88CF560CD28B02CAE7D1B9203699A1DE9CF796CD494DF
60582CAFD70B7F17C1569B79CFC1B11937F06CBBF98FB3F8ABA83215B2800261
30687B8B88299FC622B1B9C743E6B4E2D3E657B3D5566E1938323637D7929F2E
277006B7F4C91822AAA6911E494E2AD0998CB1FC1434E1920012738BB988F6A0
027198438FE663C2EACF82CEB86F7C727594> |-
/o <1C60D8A8C9B7A73DB903ADC070A7C49752E736186D1727D7954B8F3DD441
6250EFB2715F7FEA4B4F24611BB7B770A0989FFD12258A4EC0D90DD9998BDAF9
96A44DE027AE6C486FF30337F30EB574748A139900482713C8EF6F8455DA4367
02294DB22515A99C4ACC57A269598D687C25D5F66128E3441FE6E0D99B55B68D
9C19E720D771564C6692898D127FC55C985D08C7E6B95F874FD094> |-
/r <1C60D8A8C9B81F2C3A9916C4CB28F21023538C2A69D3E08B0A448624D2CE
6C19473DC07A6A4C3E0D8D2DFD7B9589F2461E064A251BFFB4F1472DE500E983
E2E667F5383BBA338778795701927E45FB048834AFB7FF5E045C79CAD4F90B53
A8A93629365ECF1B64B7916DE5DAB65845D9DB9B71D2B7B722597153CE4BA455
AAC1333D36087A511839B6E1301E787D03299ED6FB7E787777CDACC74EC37D8C
360275B503E4954E912CD342> |-
/s <1C60D8A8C9B7361F027554B74948DF9D509740193A97E4C5A946CCDAC22A
CE16A97A38CAF70766C30631C22477718670FA129F481BA880FC6C2A8C233A03
9A7A46ACD6F3CA0422B1CD13AB9E5980A98B78F274FD5FB0A519013427E3DF40
BD973F22C9B236BE3D27B0A78749138244A4ED344575D4F7F677439F8C2359FA
AB210EA03D2DAABF38A6B5B4F0819D6E85CC68A9859B12239E01058FD0C7C593
B22AC00DE1C2A90508610457C5DFEA41C78C4C677B338B4C0ED41B0474AF509B
93D8B3403DD443273DAE4F97B7CDCA81379AB0933639> |-
/t <1C60D8A8C9B854D0F414EAB29549463C152A8395E080F8A65050DED29448
713A9991EC80B85D2E40BC855D0C9C1C8F48B9F54A9F2AF77E5AE0CF2D93DC43
DDEECA57457D57C32A4E7F92D72E19B411BD6A8FD776B503B1ED0E4E775E798B
36CAB4543E392F481E83DAF858D3B1A895E3CC06AB3573C04543D9> |-
/u <1C60D8A8C9B7A73DB9860E0681DA8AEA1E5FBC1C72A452614FEB33CC58A1
99CCF544A550BDEE35652D618DE4A02AA9CF0753ADA232102DC8DC25CB958152
D1B74BC447B68C074C25C2126470565A20B42A419CDD0C7A1DA63C6A764D555B
867A9BE961ADBD0AF5B2007F47FCC9435F8B51D3F3A5D83941DD57A0C4D32E16
9A6BACC26F8AD3C9372F1114911D1D3F3FB2725FADBF9F529AA2CFB178B79F97
520325221F3417C7781EB09765> |-
/w <1C60D8A8C9B6079F04262E67C9FB6DFF2B2A2909EEE6C74AA460646E6418
023C6B7542892CB61B617E90DA8C58C94D261B2066526778FA77F05506A363FE
5266E7C038D05568B67F867A9FF97988CC575C0A7C1F4DE18568CA203BA52391
7E8148BF72D6E4FEA4245E4F8E144E9C4F6DDF7EC6DAC323FEA1568E1A6C8D85
26507DC2E91B066C274F65DD58F049FFA3E606BF021DDA3B6174F51DB721A6C7
E1197FF1898AE92ADB1C1DD84FD7DEC1> |-
systemdict /gcheck known {setglobal} if end {end} if
end
DTRRBT+TimesNewRomanPSMT /Encoding get
dup 32 /space put
dup 45 /hyphen put
dup 67 /C put
dup 69 /E put
dup 73 /I put
dup 75 /K put
dup 76 /L put
dup 77 /M put
dup 83 /S put
dup 84 /T put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 119 /w put
pop
%ADOEndSubsetFont
/DTRRBT+TimesNewRomanPSMT*1 
[32{/.notdef}rp /space 12{/.notdef}rp /hyphen 21{/.notdef}rp /C /.notdef /E 
3{/.notdef}rp /I /.notdef /K /L /M 5{/.notdef}rp /S 
/T 6{/.notdef}rp /bracketleft /.notdef /bracketright 3{/.notdef}rp /a /b 
/c /d /e /f /g /h /i 2{/.notdef}rp 
/l /m /n /o 2{/.notdef}rp /r /s /t 
/u /.notdef /w 4{/.notdef}rp /bar 131{/.notdef}rp]
DTRRBT+TimesNewRomanPSMT nf
DTRRBT+TimesNewRomanPSMT*1 [10.025 0 0 -10.025 0 0 ]msf
62.638 26.6358 mo
(Cluster)
[6.49628 2.98745 5.0125 3.98 2.49623 4.4912 0 ]xsh
153.838 26.6358 mo
(Classification)
[6.49628 2.98744 4.49121 3.99002 3.49881 2.98744 3.48863 2.49622 4.4912 4.49121 2.49622 2.98746 
5.0125 0 ]xsh
25.113 87.6658 mo
(METIS)
[9.01255 6.02495 6.02495 3.5187 0 ]xsh
69.308 87.6658 mo
(Labeling with seed)
[6.0049 4.4912 5.0125 4.48119 2.98744 2.49623 5.0125 5.0125 2.47617 7.48868 2.49623 2.98744 
5.01251 2.50624 3.47876 4.4912 4.49121 0 ]xsh
15.313 133.886 mo
(Concatenate Seed )
[6.49627 5.0125 5.0125 4.4511 4.51125 2.98745 4.4912 5.0125 3.98996 2.98745 4.4912 2.50625 
5.4937 4.4912 4.49121 5.0125 0 ]xsh
DTRRBT+TimesNewRomanPSMT*1 [10 0 0 -10 0 0 ]msf
27.963 145.916 mo
(Embedding)
[5.99992 7.99 5 4.49001 5 5 2.5 5 0 ]xsh
DTRRBT+TimesNewRomanPSMT*1 [10.025 0 0 -10.025 0 0 ]msf
93.758 148.196 mo
(K)sh
100.988 148.196 mo
(-)sh
104.338 148.196 mo
(Means)
[8.99249 4.49121 4.4912 5.01251 0 ]xsh
DTRRBT+TimesNewRomanPSMT*1 [10 0 0 -10 0 0 ]msf
192.918 146.946 mo
(Classifier)
[6.50008 2.98999 4.49001 3.99008 3.50006 2.99002 3.48993 2.49997 4.49002 0 ]xsh
[] 0 dsh
133.958 13.6658 mo
133.958 16.7358 li
1.24998 16.7358 li
1.24998 114.666 li
22.862 114.666 li
.275 .447 .769 rgb
@
22.232 112.146 mo
27.272 114.666 li
22.232 117.186 li
22.232 112.146 li
cp
ef
272.038 98.2658 mo
272.038 112.796 li
272.038 114.396 273.338 115.696 274.938 115.696 cv
304.598 115.696 li
306.208 115.696 307.508 114.396 307.508 112.796 cv
307.508 98.2658 li
307.508 96.6558 306.208 95.3558 304.598 95.3558 cv
274.938 95.3558 li
273.338 95.3558 272.038 96.6558 272.038 98.2658 cv
cp
1 gry
ef
.25 lw
2 lc
0 lj
2 ml
[.25 .5 ] 0 dsh
272.038 98.2658 mo
272.038 112.796 li
272.038 114.396 273.338 115.696 274.938 115.696 cv
304.598 115.696 li
306.208 115.696 307.508 114.396 307.508 112.796 cv
307.508 98.2658 li
307.508 96.6558 306.208 95.3558 304.598 95.3558 cv
274.938 95.3558 li
273.338 95.3558 272.038 96.6558 272.038 98.2658 cv
cp
0 gry
@
272.038 43.2358 mo
272.038 57.7658 li
272.038 59.3758 273.338 60.6758 274.938 60.6758 cv
304.598 60.6758 li
306.208 60.6758 307.508 59.3758 307.508 57.7658 cv
307.508 43.2358 li
307.508 41.6358 306.208 40.3258 304.598 40.3258 cv
274.938 40.3258 li
273.338 40.3258 272.038 41.6358 272.038 43.2358 cv
cp
@
[] 0 dsh
273.798 57.5358 mo
288.328 57.5358 li
288.328 44.2058 li
273.798 44.2058 li
cp
.275 .447 .769 rgb
@
0 gry
%ADOBeginSubsetFont: TimesNewRomanPS-ItalicMT AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2022 Adobe System Incorporated. All rights reserved.
systemdict begin
DTRRBS+TimesNewRomanPS-ItalicMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/one <1C60D8A8C9B7A73DB6A4A1045477B897A236531EE6744E986B049CB2B4
C1FE00325C8BF061D241BD30B895F448A012FA11CB58DD958F1372DACE120865
7E476E9190270F7FC72B0B9DCE2DDE5E748B644DD70718A6734618F8229BDD2E
5AE0C198797BC9647A1D37D27AAA1BAE3BFBF0B70DB4F621F7> |-
systemdict /gcheck known {setglobal} if end {end} if
end
DTRRBS+TimesNewRomanPS-ItalicMT /Encoding get
dup 49 /one put
pop
%ADOEndSubsetFont
/DTRRBS+TimesNewRomanPS-ItalicMT*1 
[49{/.notdef}rp /one 21{/.notdef}rp /G 43{/.notdef}rp /s /t 139{/.notdef}rp]
DTRRBS+TimesNewRomanPS-ItalicMT nf
DTRRBS+TimesNewRomanPS-ItalicMT*1 [10 0 0 -10 0 0 ]msf
276.788 53.9858 mo
(G)sh
DTRRBS+TimesNewRomanPS-ItalicMT*1 [6.5 0 0 -6.5 0 0 ]msf
284.008 55.4158 mo
(t)sh
DTRRBS+TimesNewRomanPS-ItalicMT*1 [6.525 0 0 -6.525 0 0 ]msf
284.488 48.7958 mo
(1)sh
273.798 57.5358 mo
288.328 57.5358 li
288.328 44.2058 li
273.798 44.2058 li
cp
.275 .447 .769 rgb
@
0 gry
DTRRBS+TimesNewRomanPS-ItalicMT*1 [10 0 0 -10 0 0 ]msf
276.788 53.9858 mo
(G)sh
DTRRBS+TimesNewRomanPS-ItalicMT*1 [6.5 0 0 -6.5 0 0 ]msf
284.008 55.4158 mo
(t)sh
DTRRBS+TimesNewRomanPS-ItalicMT*1 [6.525 0 0 -6.525 0 0 ]msf
284.488 48.7958 mo
(1)sh
291.058 57.5958 mo
305.588 57.5958 li
305.588 44.2658 li
291.058 44.2658 li
cp
.753 0 0 rgb
@
0 gry
DTRRBS+TimesNewRomanPS-ItalicMT*1 [10.025 0 0 -10.025 0 0 ]msf
293.718 54.0458 mo
(G)sh
DTRRBS+TimesNewRomanPS-ItalicMT*1 [6.525 0 0 -6.525 0 0 ]msf
300.938 55.4658 mo
(s)sh
301.888 49.1158 mo
(1)sh
291.058 57.5958 mo
305.588 57.5958 li
305.588 44.2658 li
291.058 44.2658 li
cp
.753 0 0 rgb
@
0 gry
DTRRBS+TimesNewRomanPS-ItalicMT*1 [10.025 0 0 -10.025 0 0 ]msf
293.718 54.0458 mo
(G)sh
DTRRBS+TimesNewRomanPS-ItalicMT*1 [6.525 0 0 -6.525 0 0 ]msf
300.938 55.4658 mo
(s)sh
301.888 49.1158 mo
(1)sh
[.25 .5 ] 0 dsh
272.038 68.2458 mo
272.038 82.7758 li
272.038 84.3858 273.338 85.6858 274.938 85.6858 cv
304.598 85.6858 li
306.208 85.6858 307.508 84.3858 307.508 82.7758 cv
307.508 68.2458 li
307.508 66.6458 306.208 65.3458 304.598 65.3458 cv
274.938 65.3458 li
273.338 65.3458 272.038 66.6458 272.038 68.2458 cv
cp
@
[] 0 dsh
273.738 81.7058 mo
288.268 81.7058 li
288.268 68.3758 li
273.738 68.3758 li
cp
.275 .447 .769 rgb
@
0 gry
%ADOBeginSubsetFont: TimesNewRomanPS-ItalicMT AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2022 Adobe System Incorporated. All rights reserved.
systemdict begin
DTRRBS+TimesNewRomanPS-ItalicMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/two <1C60D8A8C9B7A73DB69C12026B750802855EAC5092BB0A5898B5D5C055
BF85280FEB4B1F3E4AFB01B0A8A29DB15451C23681417470B94B4D8D92484A39
334C366B9828F8F838BF53371C17891341B316F197C3AA30247051762DF7F17C
B7ACE84978B012AD0CA07C229C814073CD1F19CA205691988B437B6925EC8729
C2823046BA> |-
systemdict /gcheck known {setglobal} if end {end} if
end
DTRRBS+TimesNewRomanPS-ItalicMT /Encoding get
dup 50 /two put
pop
%ADOEndSubsetFont
/DTRRBS+TimesNewRomanPS-ItalicMT*1 
[49{/.notdef}rp /one /two 20{/.notdef}rp /G 43{/.notdef}rp /s /t 
139{/.notdef}rp]
DTRRBS+TimesNewRomanPS-ItalicMT nf
DTRRBS+TimesNewRomanPS-ItalicMT*1 [10 0 0 -10 0 0 ]msf
276.738 78.1958 mo
(G)sh
DTRRBS+TimesNewRomanPS-ItalicMT*1 [6.5 0 0 -6.5 0 0 ]msf
283.958 79.6158 mo
(t)sh
284.438 72.9858 mo
(2)sh
273.738 81.7058 mo
288.268 81.7058 li
288.268 68.3758 li
273.738 68.3758 li
cp
.275 .447 .769 rgb
@
0 gry
DTRRBS+TimesNewRomanPS-ItalicMT*1 [10 0 0 -10 0 0 ]msf
276.738 78.1958 mo
(G)sh
DTRRBS+TimesNewRomanPS-ItalicMT*1 [6.5 0 0 -6.5 0 0 ]msf
283.958 79.6158 mo
(t)sh
284.438 72.9858 mo
(2)sh
290.998 81.7658 mo
305.528 81.7658 li
305.528 68.4358 li
290.998 68.4358 li
cp
.753 0 0 rgb
@
0 gry
DTRRBS+TimesNewRomanPS-ItalicMT*1 [10.025 0 0 -10.025 0 0 ]msf
293.638 78.2358 mo
(G)sh
DTRRBS+TimesNewRomanPS-ItalicMT*1 [6.525 0 0 -6.525 0 0 ]msf
300.868 79.6658 mo
(s)sh
301.838 73.3158 mo
(2)sh
290.998 81.7658 mo
305.528 81.7658 li
305.528 68.4358 li
290.998 68.4358 li
cp
.753 0 0 rgb
@
0 gry
DTRRBS+TimesNewRomanPS-ItalicMT*1 [10.025 0 0 -10.025 0 0 ]msf
293.638 78.2358 mo
(G)sh
DTRRBS+TimesNewRomanPS-ItalicMT*1 [6.525 0 0 -6.525 0 0 ]msf
300.868 79.6658 mo
(s)sh
301.838 73.3158 mo
(2)sh
273.788 112.476 mo
288.318 112.476 li
288.318 99.1458 li
273.788 99.1458 li
cp
.275 .447 .769 rgb
@
0 gry
%ADOBeginSubsetFont: TimesNewRomanPS-ItalicMT AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2022 Adobe System Incorporated. All rights reserved.
systemdict begin
DTRRBS+TimesNewRomanPS-ItalicMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/K <1C60D8A8C9B64EDFFBE52D1E2D375462C805C9CBBC769690A6FB41CB7474
0E1710D75E44392CA12823BC649E959364997B3D9DA7D64E3F23E0EB7B70C4A3
2DCF7B3A307982575B30AB84195D4B653F8B58E2BA949DC189B38F0BC8B53121
EAF0ACC4AFC98E32F1F6B0CD2A5125CC257D22F7870E92695540EF950F5067FD
9A6F097569AF6FFD37E8872E9D72991B136D69AF63363F2D6663139745F12984
4F0BCDBD4F228360C24BB54189FAC514AD014C9A6F27CF4DE4AC4BEC717B47AD
A39B3ACD7E0554FB56E8D1CB0D8483A835B1B08B98D66B4322AA28D1C03E5ED0
1F0E7FEF7516A00AF4CC6F51400463FA4E37BE15089C071A1C4E5AB418D04CAC
A522> |-
systemdict /gcheck known {setglobal} if end {end} if
end
DTRRBS+TimesNewRomanPS-ItalicMT /Encoding get
dup 75 /K put
pop
%ADOEndSubsetFont
/DTRRBS+TimesNewRomanPS-ItalicMT*1 
[49{/.notdef}rp /one /two 20{/.notdef}rp /G 3{/.notdef}rp /K 39{/.notdef}rp 
/s /t 139{/.notdef}rp]
DTRRBS+TimesNewRomanPS-ItalicMT nf
DTRRBS+TimesNewRomanPS-ItalicMT*1 [10.025 0 0 -10.025 0 0 ]msf
276.788 108.996 mo
(G)sh
DTRRBS+TimesNewRomanPS-ItalicMT*1 [6.5 0 0 -6.5 0 0 ]msf
284.008 110.446 mo
(t)sh
283.938 103.816 mo
(K)sh
273.788 112.476 mo
288.318 112.476 li
288.318 99.1458 li
273.788 99.1458 li
cp
.275 .447 .769 rgb
@
0 gry
DTRRBS+TimesNewRomanPS-ItalicMT*1 [10.025 0 0 -10.025 0 0 ]msf
276.788 108.996 mo
(G)sh
DTRRBS+TimesNewRomanPS-ItalicMT*1 [6.5 0 0 -6.5 0 0 ]msf
284.008 110.446 mo
(t)sh
283.938 103.816 mo
(K)sh
291.058 112.546 mo
305.588 112.546 li
305.588 99.2158 li
291.058 99.2158 li
cp
.753 0 0 rgb
@
0 gry
DTRRBS+TimesNewRomanPS-ItalicMT*1 [10.025 0 0 -10.025 0 0 ]msf
293.718 109.066 mo
(G)sh
DTRRBS+TimesNewRomanPS-ItalicMT*1 [6.525 0 0 -6.525 0 0 ]msf
300.938 110.486 mo
(s)sh
301.368 104.136 mo
(K)sh
291.058 112.546 mo
305.588 112.546 li
305.588 99.2158 li
291.058 99.2158 li
cp
.753 0 0 rgb
@
0 gry
%ADOBeginSubsetFont: TimesNewRomanPS-ItalicMT AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2022 Adobe System Incorporated. All rights reserved.
systemdict begin
DTRRBS+TimesNewRomanPS-ItalicMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/period <1C60D8A8C9B8707C905F20AC65B0724ABD4661613FE1888BA57C3AB
275B36362EB4C0B6CF31618BBDC4ED0090833127FB776362E96CC63F273D95FD
A0687B0A248B64B3ED1> |-
systemdict /gcheck known {setglobal} if end {end} if
end
DTRRBS+TimesNewRomanPS-ItalicMT /Encoding get
dup 46 /period put
pop
%ADOEndSubsetFont
/DTRRBS+TimesNewRomanPS-ItalicMT*1 
[46{/.notdef}rp /period 2{/.notdef}rp /one /two 20{/.notdef}rp /G 3{/.notdef}rp 
/K 39{/.notdef}rp /s /t 139{/.notdef}rp]
DTRRBS+TimesNewRomanPS-ItalicMT nf
DTRRBS+TimesNewRomanPS-ItalicMT*1 [10.025 0 0 -10.025 0 0 ]msf
293.718 109.066 mo
(G)sh
DTRRBS+TimesNewRomanPS-ItalicMT*1 [6.525 0 0 -6.525 0 0 ]msf
300.938 110.486 mo
(s)sh
301.368 104.136 mo
(K)sh
DTRRBS+TimesNewRomanPS-ItalicMT*1 [-4.4e-7 10 10 4.4e-7 0 0 ]msf
290.368 86.2958 mo
(...)
[2.5 2.5 0 ]ysh
.5 lw
162.868 107.546 mo
164.198 107.546 li
164.198 103.736 li
171.798 111.356 li
164.198 118.966 li
164.198 115.156 li
162.868 115.156 li
162.868 107.546 li
cp
159.268 107.546 mo
161.668 107.546 li
161.668 115.156 li
159.268 115.156 li
159.268 107.546 li
cp
156.868 107.546 mo
158.068 107.546 li
158.068 115.156 li
156.868 115.156 li
156.868 107.546 li
cp
@
76.448 106.296 mo
77.778 106.296 li
77.778 102.486 li
85.388 110.096 li
77.778 117.716 li
77.778 113.906 li
76.448 113.906 li
76.448 106.296 li
cp
72.848 106.296 mo
75.248 106.296 li
75.248 113.906 li
72.848 113.906 li
72.848 106.296 li
cp
70.458 106.296 mo
71.648 106.296 li
71.648 113.906 li
70.458 113.906 li
70.458 106.296 li
cp
@
162.868 55.1958 mo
164.198 55.1958 li
164.198 51.3958 li
171.798 59.0058 li
164.198 66.6158 li
164.198 62.8158 li
162.868 62.8158 li
162.868 55.1958 li
cp
159.268 55.1958 mo
161.668 55.1958 li
161.668 62.8158 li
159.268 62.8158 li
159.268 55.1958 li
cp
156.868 55.1958 mo
158.068 55.1958 li
158.068 62.8158 li
156.868 62.8158 li
156.868 55.1958 li
cp
@
261.698 87.3858 mo
263.028 87.3858 li
263.028 83.5758 li
270.638 91.1858 li
263.028 98.8058 li
263.028 94.9958 li
261.698 94.9958 li
261.698 87.3858 li
cp
258.098 87.3858 mo
260.498 87.3858 li
260.498 94.9958 li
258.098 94.9958 li
258.098 87.3858 li
cp
255.708 87.3858 mo
256.898 87.3858 li
256.898 94.9958 li
255.708 94.9958 li
255.708 87.3858 li
cp
@
0 gry
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2022 Adobe System Incorporated. All rights reserved.
systemdict begin
DTRRBT+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/H <1C60D8A8C9B6079F62C8472A58E49E4C65298F7DBB13584B0C608B103B8F
2B0C72AF215D43C457FE4678B9114F992A1CA0DD95AD962EE67821EBE89C76AF
7B7C203022FE3C67E29F7C9AA5921E4D15A2645D93C73845A47B6C4F855F057F
BA3B47AC2707354E73F37A88912B11BC586C19F99285C7E09F7C6AE400A135AD
2578B2C1702C267512A0254A355FAF242A3E032C2D5773AA8E4D90998616B06D
E2126832E624AA95B6CEA6DE0CF980ABC5058497B243E4F1F614D2E3330AC509
CE2BF6F280235C57C7347C7DBE389D9DA8C428E4F439ED717BD43889835C90DE
66BDF27965E2CAF6D3F8A236> |-
/p <1C60D8A8C9B7A73DDE03BEEA75B31F61E78B8C94AAF630ACAE1A607BD40E
B48302A40F17E763F71E8B5595B8EEEBB33C0827EEA0DE5370DD4C7A09244048
D0DA814D6E79BAC2B8E456D2F119496FF35E5A13F4B8F71ECD895B10E20FBAC6
66023D0941B5A0FF139CBD18745BC2892DD91EE541EAD2B54AF0839C3327F759
04A81A3805CFC7AF83735A7079B305271753A14327F3CB693ACCFE5C9D6A3B84
31B357819DFFAD81BD2A60573E4CA4C48EC0A5E07291768D829E6A70067C076E
94545FD4D8E2BB7431617263A47DB04F0B8630D6AB06FF2DD1B1F383A59D02DF
1C7730E7CC0F462D79552DFA> |-
/v <1C60D8A8C9B7A73DDA3AD4E30B5CCD7D3C12F7959C83D9C808662F1D2940
3E3640D88B6D61CC1EF17C120CDCE65E70C4FE9E153F8E52BB6A45EF1A33FF33
B350E779BE70BFD66B1893DAD63FDF011F2039FF0D075853D9D0E3D26BA0EDAE
DA247A4C2489AC431F6D923096DA608667B0FA6E60F963DA8A46029578956D98
258ABD433E9E> |-
/y <1C60D8A8C9B7A73DDE03E4B644C159EB8B647E016C26B087177A3C5BC5BA
F02161182070C8A4222C2E1ED9B95B756DF22232FA7BE5897B7C6D574795119A
3B50894B8B0E1A184B7636697D129D88C76A3FD42BABE719D85F7DC372AB50B8
B16D988DA863EE6A5B7454A406C9D5E815158A5786509E6DF27377A83F3454DD
6905EA3123CBA5BA0D4772C12767864CF2C5FEDE2AFF05D3CC0534D74E6AE9DB
F9F3B49677449A761BE771C9C1AB2D4DC994988233EE24B9E175796C6F13518A
71BC990F312D4821883A95164BCE1683B85434AFA8> |-
systemdict /gcheck known {setglobal} if end {end} if
end
DTRRBT+TimesNewRomanPSMT /Encoding get
dup 72 /H put
dup 112 /p put
dup 118 /v put
dup 121 /y put
pop
%ADOEndSubsetFont
/DTRRBT+TimesNewRomanPSMT*1 
[32{/.notdef}rp /space 12{/.notdef}rp /hyphen 21{/.notdef}rp /C /.notdef /E 
2{/.notdef}rp /H /I /.notdef /K /L /M 5{/.notdef}rp 
/S /T 6{/.notdef}rp /bracketleft /.notdef /bracketright 3{/.notdef}rp /a 
/b /c /d /e /f /g /h /i 
2{/.notdef}rp /l /m /n /o /p /.notdef /r 
/s /t /u /v /w /.notdef /y 2{/.notdef}rp 
/bar 131{/.notdef}rp]
DTRRBT+TimesNewRomanPSMT nf
DTRRBT+TimesNewRomanPSMT*1 [10 0 0 -10 0 0 ]msf
276.118 130.196 mo
(Highly )
[7.01999 2.99002 5 5.03998 2.99002 5 0 ]xsh
DTRRBT+TimesNewRomanPSMT*1 [10.025 0 0 -10.025 0 0 ]msf
267.788 142.196 mo
(ove)sh
282.264 142.196 mo
(rlapped)
[3.51871 2.49622 4.49121 5.01248 5.01251 4.45111 0 ]xsh
263.618 154.216 mo
(Mini)
[9.01254 2.49625 5.01248 0 ]xsh
283.088 154.216 mo
(-)sh
286.408 154.216 mo
(batches)
[5.01251 4.48117 2.49622 4.49121 5.01248 4.4812 0 ]xsh
.25 lw
27.272 124.576 mo
69.792 124.576 li
69.792 104.76 li
27.272 104.76 li
cp
.784 gry
@
1 lc
1 lj
193.708 40.6058 mo
192.188 53.8658 li
.647 gry
@
192.188 53.8658 mo
199.738 64.4458 li
@
199.588 52.5458 mo
192.188 53.8658 li
@
199.738 64.4458 mo
196.978 75.0258 li
@
223.098 71.9758 mo
210.038 75.8558 li
@
207.498 34.1758 mo
213.168 41.9258 li
@
227.808 68.0858 mo
210.208 55.3458 li
@
233.568 60.6258 mo
227.808 68.0858 li
@
223.398 54.6658 mo
233.568 60.6258 li
@
193.708 40.6058 mo
210.208 55.3458 li
@
223.398 54.6658 mo
230.288 42.9958 li
@
.75 lw
2 lc
0 lj
213.168 41.9258 mo
208.838 56.4858 li
199.738 65.8158 li
0 gry
@
1 lc
1 lj
210.208 55.3458 mo
216.058 68.0858 li
@
199.738 64.4458 mo
199.588 52.5458 li
@
216.058 68.0858 mo
199.738 64.4458 li
@
216.058 65.1258 mo
217.698 65.1258 219.018 66.4558 219.018 68.0858 cv
219.018 69.7258 217.698 71.0458 216.058 71.0458 cv
214.428 71.0458 213.098 69.7258 213.098 68.0858 cv
213.098 66.4558 214.428 65.1258 216.058 65.1258 cv
cp
.969 .796 .675 rgb
ef
2 lc
0 lj
216.058 65.1258 mo
217.698 65.1258 219.018 66.4558 219.018 68.0858 cv
219.018 69.7258 217.698 71.0458 216.058 71.0458 cv
214.428 71.0458 213.098 69.7258 213.098 68.0858 cv
213.098 66.4558 214.428 65.1258 216.058 65.1258 cv
cp
.929 .49 .192 rgb
@
199.588 49.5858 mo
201.228 49.5858 202.548 50.9158 202.548 52.5458 cv
202.548 54.1758 201.228 55.5058 199.588 55.5058 cv
197.958 55.5058 196.638 54.1758 196.638 52.5458 cv
196.638 50.9158 197.958 49.5858 199.588 49.5858 cv
cp
.969 .796 .675 rgb
ef
199.588 49.5858 mo
201.228 49.5858 202.548 50.9158 202.548 52.5458 cv
202.548 54.1758 201.228 55.5058 199.588 55.5058 cv
197.958 55.5058 196.638 54.1758 196.638 52.5458 cv
196.638 50.9158 197.958 49.5858 199.588 49.5858 cv
cp
.929 .49 .192 rgb
@
212.588 41.6958 mo
224.718 55.5758 li
207.398 55.5758 li
0 gry
@
210.208 52.3858 mo
211.838 52.3858 213.168 53.7158 213.168 55.3458 cv
213.168 56.9758 211.838 58.3058 210.208 58.3058 cv
208.568 58.3058 207.248 56.9758 207.248 55.3458 cv
207.248 53.7158 208.568 52.3858 210.208 52.3858 cv
cp
.565 .667 .859 rgb
ef
210.208 52.3858 mo
211.838 52.3858 213.168 53.7158 213.168 55.3458 cv
213.168 56.9758 211.838 58.3058 210.208 58.3058 cv
208.568 58.3058 207.248 56.9758 207.248 55.3458 cv
207.248 53.7158 208.568 52.3858 210.208 52.3858 cv
cp
.275 .447 .769 rgb
@
213.168 38.9658 mo
214.798 38.9658 216.118 40.2858 216.118 41.9258 cv
216.118 43.5558 214.798 44.8758 213.168 44.8758 cv
211.528 44.8758 210.208 43.5558 210.208 41.9258 cv
210.208 40.2858 211.528 38.9658 213.168 38.9658 cv
cp
.565 .667 .859 rgb
ef
213.168 38.9658 mo
214.798 38.9658 216.118 40.2858 216.118 41.9258 cv
216.118 43.5558 214.798 44.8758 213.168 44.8758 cv
211.528 44.8758 210.208 43.5558 210.208 41.9258 cv
210.208 40.2858 211.528 38.9658 213.168 38.9658 cv
cp
.275 .447 .769 rgb
@
223.398 51.7058 mo
225.038 51.7058 226.358 53.0258 226.358 54.6658 cv
226.358 56.2958 225.038 57.6258 223.398 57.6258 cv
221.768 57.6258 220.448 56.2958 220.448 54.6658 cv
220.448 53.0258 221.768 51.7058 223.398 51.7058 cv
cp
.565 .667 .859 rgb
ef
223.398 51.7058 mo
225.038 51.7058 226.358 53.0258 226.358 54.6658 cv
226.358 56.2958 225.038 57.6258 223.398 57.6258 cv
221.768 57.6258 220.448 56.2958 220.448 54.6658 cv
220.448 53.0258 221.768 51.7058 223.398 51.7058 cv
cp
.275 .447 .769 rgb
@
199.738 61.4858 mo
201.368 61.4858 202.698 62.8158 202.698 64.4458 cv
202.698 66.0758 201.368 67.4058 199.738 67.4058 cv
198.108 67.4058 196.778 66.0758 196.778 64.4458 cv
196.778 62.8158 198.108 61.4858 199.738 61.4858 cv
cp
.969 .796 .675 rgb
ef
199.738 61.4858 mo
201.368 61.4858 202.698 62.8158 202.698 64.4458 cv
202.698 66.0758 201.368 67.4058 199.738 67.4058 cv
198.108 67.4058 196.778 66.0758 196.778 64.4458 cv
196.778 62.8158 198.108 61.4858 199.738 61.4858 cv
cp
.929 .49 .192 rgb
@
230.288 41.3558 mo
231.198 41.3558 231.928 42.0858 231.928 42.9958 cv
231.928 43.8958 231.198 44.6258 230.288 44.6258 cv
229.388 44.6258 228.658 43.8958 228.658 42.9958 cv
228.658 42.0858 229.388 41.3558 230.288 41.3558 cv
cp
.565 .667 .859 rgb
ef
.5 lw
230.288 41.3558 mo
231.198 41.3558 231.928 42.0858 231.928 42.9958 cv
231.928 43.8958 231.198 44.6258 230.288 44.6258 cv
229.388 44.6258 228.658 43.8958 228.658 42.9958 cv
228.658 42.0858 229.388 41.3558 230.288 41.3558 cv
cp
.647 gry
@
193.708 38.9658 mo
194.608 38.9658 195.338 39.6958 195.338 40.6058 cv
195.338 41.5058 194.608 42.2358 193.708 42.2358 cv
192.798 42.2358 192.068 41.5058 192.068 40.6058 cv
192.068 39.6958 192.798 38.9658 193.708 38.9658 cv
cp
.969 .796 .675 rgb
ef
193.708 38.9658 mo
194.608 38.9658 195.338 39.6958 195.338 40.6058 cv
195.338 41.5058 194.608 42.2358 193.708 42.2358 cv
192.798 42.2358 192.068 41.5058 192.068 40.6058 cv
192.068 39.6958 192.798 38.9658 193.708 38.9658 cv
cp
.647 gry
@
233.568 58.9858 mo
234.468 58.9858 235.198 59.7158 235.198 60.6258 cv
235.198 61.5258 234.468 62.2558 233.568 62.2558 cv
232.658 62.2558 231.928 61.5258 231.928 60.6258 cv
231.928 59.7158 232.658 58.9858 233.568 58.9858 cv
cp
.565 .667 .859 rgb
ef
233.568 58.9858 mo
234.468 58.9858 235.198 59.7158 235.198 60.6258 cv
235.198 61.5258 234.468 62.2558 233.568 62.2558 cv
232.658 62.2558 231.928 61.5258 231.928 60.6258 cv
231.928 59.7158 232.658 58.9858 233.568 58.9858 cv
cp
.647 gry
@
223.098 70.3458 mo
224.008 70.3458 224.738 71.0758 224.738 71.9758 cv
224.738 72.8858 224.008 73.6158 223.098 73.6158 cv
222.198 73.6158 221.468 72.8858 221.468 71.9758 cv
221.468 71.0758 222.198 70.3458 223.098 70.3458 cv
cp
.969 .796 .675 rgb
ef
223.098 70.3458 mo
224.008 70.3458 224.738 71.0758 224.738 71.9758 cv
224.738 72.8858 224.008 73.6158 223.098 73.6158 cv
222.198 73.6158 221.468 72.8858 221.468 71.9758 cv
221.468 71.0758 222.198 70.3458 223.098 70.3458 cv
cp
.647 gry
@
227.808 66.4558 mo
228.718 66.4558 229.448 67.1858 229.448 68.0858 cv
229.448 68.9958 228.718 69.7258 227.808 69.7258 cv
226.908 69.7258 226.178 68.9958 226.178 68.0858 cv
226.178 67.1858 226.908 66.4558 227.808 66.4558 cv
cp
.969 .796 .675 rgb
ef
227.808 66.4558 mo
228.718 66.4558 229.448 67.1858 229.448 68.0858 cv
229.448 68.9958 228.718 69.7258 227.808 69.7258 cv
226.908 69.7258 226.178 68.9958 226.178 68.0858 cv
226.178 67.1858 226.908 66.4558 227.808 66.4558 cv
cp
.647 gry
@
207.498 32.5358 mo
208.398 32.5358 209.128 33.2758 209.128 34.1758 cv
209.128 35.0758 208.398 35.8158 207.498 35.8158 cv
206.588 35.8158 205.858 35.0758 205.858 34.1758 cv
205.858 33.2758 206.588 32.5358 207.498 32.5358 cv
cp
.565 .667 .859 rgb
ef
207.498 32.5358 mo
208.398 32.5358 209.128 33.2758 209.128 34.1758 cv
209.128 35.0758 208.398 35.8158 207.498 35.8158 cv
206.588 35.8158 205.858 35.0758 205.858 34.1758 cv
205.858 33.2758 206.588 32.5358 207.498 32.5358 cv
cp
.647 gry
@
196.978 73.3858 mo
197.878 73.3858 198.618 74.1258 198.618 75.0258 cv
198.618 75.9358 197.878 76.6658 196.978 76.6658 cv
196.078 76.6658 195.338 75.9358 195.338 75.0258 cv
195.338 74.1258 196.078 73.3858 196.978 73.3858 cv
cp
.969 .796 .675 rgb
ef
196.978 73.3858 mo
197.878 73.3858 198.618 74.1258 198.618 75.0258 cv
198.618 75.9358 197.878 76.6658 196.978 76.6658 cv
196.078 76.6658 195.338 75.9358 195.338 75.0258 cv
195.338 74.1258 196.078 73.3858 196.978 73.3858 cv
cp
.647 gry
@
192.188 52.2358 mo
193.088 52.2358 193.828 52.9658 193.828 53.8658 cv
193.828 54.7758 193.088 55.5058 192.188 55.5058 cv
191.288 55.5058 190.548 54.7758 190.548 53.8658 cv
190.548 52.9658 191.288 52.2358 192.188 52.2358 cv
cp
.969 .796 .675 rgb
ef
192.188 52.2358 mo
193.088 52.2358 193.828 52.9658 193.828 53.8658 cv
193.828 54.7758 193.088 55.5058 192.188 55.5058 cv
191.288 55.5058 190.548 54.7758 190.548 53.8658 cv
190.548 52.9658 191.288 52.2358 192.188 52.2358 cv
cp
.647 gry
@
222.138 36.9458 mo
223.038 36.9458 223.768 37.6858 223.768 38.5858 cv
223.768 39.4858 223.038 40.2258 222.138 40.2258 cv
221.228 40.2258 220.498 39.4858 220.498 38.5858 cv
220.498 37.6858 221.228 36.9458 222.138 36.9458 cv
cp
.565 .667 .859 rgb
ef
222.138 36.9458 mo
223.038 36.9458 223.768 37.6858 223.768 38.5858 cv
223.768 39.4858 223.038 40.2258 222.138 40.2258 cv
221.228 40.2258 220.498 39.4858 220.498 38.5858 cv
220.498 37.6858 221.228 36.9458 222.138 36.9458 cv
cp
.647 gry
@
210.038 74.2158 mo
210.948 74.2158 211.678 74.9558 211.678 75.8558 cv
211.678 76.7558 210.948 77.4958 210.038 77.4958 cv
209.138 77.4958 208.408 76.7558 208.408 75.8558 cv
208.408 74.9558 209.138 74.2158 210.038 74.2158 cv
cp
.969 .796 .675 rgb
ef
210.038 74.2158 mo
210.948 74.2158 211.678 74.9558 211.678 75.8558 cv
211.678 76.7558 210.948 77.4958 210.038 77.4958 cv
209.138 77.4958 208.408 76.7558 208.408 75.8558 cv
208.408 74.9558 209.138 74.2158 210.038 74.2158 cv
cp
.647 gry
@
185.738 62.8058 mo
186.648 62.8058 187.378 63.5458 187.378 64.4458 cv
187.378 65.3558 186.648 66.0858 185.738 66.0858 cv
184.838 66.0858 184.108 65.3558 184.108 64.4458 cv
184.108 63.5458 184.838 62.8058 185.738 62.8058 cv
cp
.969 .796 .675 rgb
ef
185.738 62.8058 mo
186.648 62.8058 187.378 63.5458 187.378 64.4458 cv
187.378 65.3558 186.648 66.0858 185.738 66.0858 cv
184.838 66.0858 184.108 65.3558 184.108 64.4458 cv
184.108 63.5458 184.838 62.8058 185.738 62.8058 cv
cp
.647 gry
@
230.168 73.3058 mo
231.068 73.3058 231.798 74.0358 231.798 74.9458 cv
231.798 75.8458 231.068 76.5758 230.168 76.5758 cv
229.258 76.5758 228.528 75.8458 228.528 74.9458 cv
228.528 74.0358 229.258 73.3058 230.168 73.3058 cv
cp
.969 .796 .675 rgb
ef
230.168 73.3058 mo
231.068 73.3058 231.798 74.0358 231.798 74.9458 cv
231.798 75.8458 231.068 76.5758 230.168 76.5758 cv
229.258 76.5758 228.528 75.8458 228.528 74.9458 cv
228.528 74.0358 229.258 73.3058 230.168 73.3058 cv
cp
.647 gry
@
232.278 34.3858 mo
233.178 34.3858 233.908 35.1158 233.908 36.0258 cv
233.908 36.9258 233.178 37.6558 232.278 37.6558 cv
231.368 37.6558 230.638 36.9258 230.638 36.0258 cv
230.638 35.1158 231.368 34.3858 232.278 34.3858 cv
cp
.565 .667 .859 rgb
ef
232.278 34.3858 mo
233.178 34.3858 233.908 35.1158 233.908 36.0258 cv
233.908 36.9258 233.178 37.6558 232.278 37.6558 cv
231.368 37.6558 230.638 36.9258 230.638 36.0258 cv
230.638 35.1158 231.368 34.3858 232.278 34.3858 cv
cp
.647 gry
@
0 gry
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2022 Adobe System Incorporated. All rights reserved.
systemdict begin
DTRRBT+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/G <1C60D8A8C9B6079F6D6E36005945EC7274CF8CD5EF5B42D280E6D8A4F608
6ADC4B88F4BA16F6A237691F3F760A6129A67DCE9322616B1D7BB21115511238
376B94C01432A999E95ACF02B9743B28C7A3C8109C25013AEA47EC71807E3BFE
6B26986496C6B96A2458AF130FF55F6939E40BA894719E24A717462CC4A00B11
ADE5809AB1E0B4D7805897BE50087CD64F5AEA7744526E08B0D657538988C41B
FE39A8735842D620E001E1A863F676AFB361CF4C81718CBC4A0CC5AC0D51A34A
CA7D8BBE5B5D6E8D466D858B118FBBA2161DB0F7E151EB0958EF2C5C3F> |-
/N <1C60D8A8C9B6079FEBDAFCF29D322161AC3F52EDD22433113CAA67ECAF0B
056592AA81FE2842CB172B65A1B8C599C7080F0FEEDF52AD2A1E3DD4CF5B5A3A
BC5E3E3936B6025ECB4BBB9A6B9E506B790F934302A34C91233D5C7DD4480C8E
57FB7AE58D5F049C8795FEC67FB4BCA555E2CC51B9B80AEAE5214780F4B92D63
E63AE746DB94B9539BA648935E38> |-
systemdict /gcheck known {setglobal} if end {end} if
end
DTRRBT+TimesNewRomanPSMT /Encoding get
dup 71 /G put
dup 78 /N put
pop
%ADOEndSubsetFont
/DTRRBT+TimesNewRomanPSMT*1 
[32{/.notdef}rp /space 12{/.notdef}rp /hyphen 21{/.notdef}rp /C /.notdef /E 
/.notdef /G /H /I /.notdef /K /L /M 
/N 4{/.notdef}rp /S /T 6{/.notdef}rp /bracketleft /.notdef /bracketright 
3{/.notdef}rp /a /b /c /d /e /f /g 
/h /i 2{/.notdef}rp /l /m /n /o /p 
/.notdef /r /s /t /u /v /w /.notdef 
/y 2{/.notdef}rp /bar 131{/.notdef}rp]
DTRRBT+TimesNewRomanPSMT nf
DTRRBT+TimesNewRomanPSMT*1 [10.025 0 0 -10.025 0 0 ]msf
177.188 86.1158 mo
(GNN Classifying)
[6.99745 7.48868 6.99745 2.50624 6.98752 2.49622 4.49118 3.99005 3.99002 2.49622 3.48862 5.01251 
2.48621 5.01248 0 ]xsh
1 lc
1 lj
195.938 13.6658 mo
195.938 16.7358 li
211.888 16.7358 li
211.888 25.1158 li
.275 .447 .769 rgb
@
214.408 24.4858 mo
211.888 29.5258 li
209.368 24.4858 li
214.408 24.4858 li
cp
ef
133.958 13.6658 mo
133.958 16.7358 li
211.888 16.7358 li
211.888 25.1158 li
@
214.408 24.4858 mo
211.888 29.5258 li
209.368 24.4858 li
214.408 24.4858 li
cp
ef
0 gry
DTRRBT+TimesNewRomanPSMT*1 [10.025 0 0 -10.025 0 0 ]msf
13.163 12.4458 mo
(Trained Embeddings)
[6.0049 3.48862 4.4912 2.49622 5.0125 4.48118 5.0125 2.50626 5.98485 7.98992 5.0125 4.48118 
5.0125 5.0125 2.47618 5.0125 5.0125 0 ]xsh
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 /2 ]]
] del_res
/DTRRBT+TimesNewRomanPSMT*1 uf
/DTRRBT+TimesNewRomanPSMT uf
/TimesNewRomanPSMT uf
/DTRRBS+TimesNewRomanPS-ItalicMT*1 uf
/DTRRBS+TimesNewRomanPS-ItalicMT uf
/TimesNewRomanPS-ItalicMT uf
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
